
DAq_IEPE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a2c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002b38  08002b38  00012b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002b70  08002b70  00012b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002b74  08002b74  00012b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001ec  2000000c  08002b84  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001f8  08002b84  000201f8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b01d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000316d  00000000  00000000  0003b052  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b45d  00000000  00000000  0003e1bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b98  00000000  00000000  00049620  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001630  00000000  00000000  0004a1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00018fdc  00000000  00000000  0004b7e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000cfc2  00000000  00000000  000647c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00079590  00000000  00000000  00071786  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000ead16  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002758  00000000  00000000  000ead94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b20 	.word	0x08002b20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002b20 	.word	0x08002b20

0800014c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8000150:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	4d0d      	ldr	r5, [pc, #52]	; (8000188 <HAL_InitTick+0x3c>)
 8000154:	4a0d      	ldr	r2, [pc, #52]	; (800018c <HAL_InitTick+0x40>)
 8000156:	7829      	ldrb	r1, [r5, #0]
 8000158:	6812      	ldr	r2, [r2, #0]
 800015a:	fbb3 f3f1 	udiv	r3, r3, r1
{
 800015e:	4606      	mov	r6, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000160:	fbb2 f0f3 	udiv	r0, r2, r3
 8000164:	f000 fb80 	bl	8000868 <HAL_SYSTICK_Config>
 8000168:	b908      	cbnz	r0, 800016e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016a:	2e0f      	cmp	r6, #15
 800016c:	d901      	bls.n	8000172 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800016e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000170:	bd70      	pop	{r4, r5, r6, pc}
 8000172:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000174:	4602      	mov	r2, r0
 8000176:	4631      	mov	r1, r6
 8000178:	f04f 30ff 	mov.w	r0, #4294967295
 800017c:	f000 fb32 	bl	80007e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000180:	606e      	str	r6, [r5, #4]
 8000182:	4620      	mov	r0, r4
}
 8000184:	bd70      	pop	{r4, r5, r6, pc}
 8000186:	bf00      	nop
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008

08000190 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000190:	4a07      	ldr	r2, [pc, #28]	; (80001b0 <HAL_Init+0x20>)
{
 8000192:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000196:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	f043 0310 	orr.w	r3, r3, #16
 800019c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019e:	f000 fb0f 	bl	80007c0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a2:	2000      	movs	r0, #0
 80001a4:	f7ff ffd2 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001a8:	f002 faec 	bl	8002784 <HAL_MspInit>
}
 80001ac:	2000      	movs	r0, #0
 80001ae:	bd08      	pop	{r3, pc}
 80001b0:	40022000 	.word	0x40022000

080001b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b4:	4a03      	ldr	r2, [pc, #12]	; (80001c4 <HAL_IncTick+0x10>)
 80001b6:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <HAL_IncTick+0x14>)
 80001b8:	6811      	ldr	r1, [r2, #0]
 80001ba:	781b      	ldrb	r3, [r3, #0]
 80001bc:	440b      	add	r3, r1
 80001be:	6013      	str	r3, [r2, #0]
}
 80001c0:	4770      	bx	lr
 80001c2:	bf00      	nop
 80001c4:	200001f4 	.word	0x200001f4
 80001c8:	20000000 	.word	0x20000000

080001cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001cc:	4b01      	ldr	r3, [pc, #4]	; (80001d4 <HAL_GetTick+0x8>)
 80001ce:	6818      	ldr	r0, [r3, #0]
}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	200001f4 	.word	0x200001f4

080001d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001d8:	b538      	push	{r3, r4, r5, lr}
 80001da:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001dc:	f7ff fff6 	bl	80001cc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80001e2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80001e4:	d002      	beq.n	80001ec <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80001e6:	4b04      	ldr	r3, [pc, #16]	; (80001f8 <HAL_Delay+0x20>)
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001ec:	f7ff ffee 	bl	80001cc <HAL_GetTick>
 80001f0:	1b40      	subs	r0, r0, r5
 80001f2:	42a0      	cmp	r0, r4
 80001f4:	d3fa      	bcc.n	80001ec <HAL_Delay+0x14>
  {
  }
}
 80001f6:	bd38      	pop	{r3, r4, r5, pc}
 80001f8:	20000000 	.word	0x20000000

080001fc <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80001fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80001fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000200:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000204:	d002      	beq.n	800020c <ADC_DMAConvCplt+0x10>
    HAL_ADC_ConvCpltCallback(hadc); 
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000206:	6a1b      	ldr	r3, [r3, #32]
 8000208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020a:	4718      	bx	r3
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800020c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800020e:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 8000214:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000216:	629a      	str	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000218:	688a      	ldr	r2, [r1, #8]
 800021a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800021e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000222:	d003      	beq.n	800022c <ADC_DMAConvCplt+0x30>
    HAL_ADC_ConvCpltCallback(hadc); 
 8000224:	4618      	mov	r0, r3
 8000226:	f002 faa3 	bl	8002770 <HAL_ADC_ConvCpltCallback>
  }
}
 800022a:	bd10      	pop	{r4, pc}
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800022c:	68da      	ldr	r2, [r3, #12]
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1f8      	bne.n	8000224 <ADC_DMAConvCplt+0x28>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000232:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000234:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000238:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800023a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800023c:	04d2      	lsls	r2, r2, #19
 800023e:	d4f1      	bmi.n	8000224 <ADC_DMAConvCplt+0x28>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000242:	f042 0201 	orr.w	r2, r2, #1
 8000246:	629a      	str	r2, [r3, #40]	; 0x28
 8000248:	e7ec      	b.n	8000224 <ADC_DMAConvCplt+0x28>
 800024a:	bf00      	nop

0800024c <HAL_ADC_ConvHalfCpltCallback>:
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000250:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000252:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000254:	f7ff fffa 	bl	800024c <HAL_ADC_ConvHalfCpltCallback>
}
 8000258:	bd08      	pop	{r3, pc}
 800025a:	bf00      	nop

0800025c <HAL_ADC_LevelOutOfWindowCallback>:
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop

08000260 <HAL_ADC_IRQHandler>:
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000260:	6803      	ldr	r3, [r0, #0]
{
 8000262:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000264:	685a      	ldr	r2, [r3, #4]
{
 8000266:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000268:	0690      	lsls	r0, r2, #26
 800026a:	d502      	bpl.n	8000272 <HAL_ADC_IRQHandler+0x12>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800026c:	681a      	ldr	r2, [r3, #0]
 800026e:	0791      	lsls	r1, r2, #30
 8000270:	d42a      	bmi.n	80002c8 <HAL_ADC_IRQHandler+0x68>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000272:	685a      	ldr	r2, [r3, #4]
 8000274:	0610      	lsls	r0, r2, #24
 8000276:	d502      	bpl.n	800027e <HAL_ADC_IRQHandler+0x1e>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	0751      	lsls	r1, r2, #29
 800027c:	d406      	bmi.n	800028c <HAL_ADC_IRQHandler+0x2c>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800027e:	685a      	ldr	r2, [r3, #4]
 8000280:	0652      	lsls	r2, r2, #25
 8000282:	d502      	bpl.n	800028a <HAL_ADC_IRQHandler+0x2a>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	07db      	lsls	r3, r3, #31
 8000288:	d433      	bmi.n	80002f2 <HAL_ADC_IRQHandler+0x92>
}
 800028a:	bd10      	pop	{r4, pc}
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800028c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800028e:	06d2      	lsls	r2, r2, #27
 8000290:	d403      	bmi.n	800029a <HAL_ADC_IRQHandler+0x3a>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000292:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000294:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000298:	62a2      	str	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800029a:	689a      	ldr	r2, [r3, #8]
 800029c:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 80002a0:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 80002a4:	d034      	beq.n	8000310 <HAL_ADC_IRQHandler+0xb0>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80002a6:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80002a8:	0550      	lsls	r0, r2, #21
 80002aa:	d405      	bmi.n	80002b8 <HAL_ADC_IRQHandler+0x58>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80002ac:	689a      	ldr	r2, [r3, #8]
 80002ae:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80002b2:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80002b6:	d028      	beq.n	800030a <HAL_ADC_IRQHandler+0xaa>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80002b8:	4620      	mov	r0, r4
 80002ba:	f000 fa7f 	bl	80007bc <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80002be:	f06f 020c 	mvn.w	r2, #12
 80002c2:	6823      	ldr	r3, [r4, #0]
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	e7da      	b.n	800027e <HAL_ADC_IRQHandler+0x1e>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80002ca:	06d2      	lsls	r2, r2, #27
 80002cc:	d403      	bmi.n	80002d6 <HAL_ADC_IRQHandler+0x76>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80002ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80002d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80002d4:	62a2      	str	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80002d6:	689a      	ldr	r2, [r3, #8]
 80002d8:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80002dc:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80002e0:	d026      	beq.n	8000330 <HAL_ADC_IRQHandler+0xd0>
      HAL_ADC_ConvCpltCallback(hadc);
 80002e2:	4620      	mov	r0, r4
 80002e4:	f002 fa44 	bl	8002770 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80002e8:	f06f 0212 	mvn.w	r2, #18
 80002ec:	6823      	ldr	r3, [r4, #0]
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	e7bf      	b.n	8000272 <HAL_ADC_IRQHandler+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80002f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80002f4:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80002f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002fa:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80002fc:	f7ff ffae 	bl	800025c <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000300:	f06f 0201 	mvn.w	r2, #1
 8000304:	6823      	ldr	r3, [r4, #0]
 8000306:	601a      	str	r2, [r3, #0]
}
 8000308:	bd10      	pop	{r4, pc}
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800030a:	68e2      	ldr	r2, [r4, #12]
 800030c:	2a00      	cmp	r2, #0
 800030e:	d1d3      	bne.n	80002b8 <HAL_ADC_IRQHandler+0x58>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000310:	685a      	ldr	r2, [r3, #4]
 8000312:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000316:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000318:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800031a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800031e:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000320:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000322:	05d9      	lsls	r1, r3, #23
 8000324:	d4c8      	bmi.n	80002b8 <HAL_ADC_IRQHandler+0x58>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000326:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	62a3      	str	r3, [r4, #40]	; 0x28
 800032e:	e7c3      	b.n	80002b8 <HAL_ADC_IRQHandler+0x58>
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000330:	68e2      	ldr	r2, [r4, #12]
 8000332:	2a00      	cmp	r2, #0
 8000334:	d1d5      	bne.n	80002e2 <HAL_ADC_IRQHandler+0x82>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000336:	685a      	ldr	r2, [r3, #4]
 8000338:	f022 0220 	bic.w	r2, r2, #32
 800033c:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800033e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000344:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000346:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000348:	04db      	lsls	r3, r3, #19
 800034a:	d4ca      	bmi.n	80002e2 <HAL_ADC_IRQHandler+0x82>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800034c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800034e:	f043 0301 	orr.w	r3, r3, #1
 8000352:	62a3      	str	r3, [r4, #40]	; 0x28
 8000354:	e7c5      	b.n	80002e2 <HAL_ADC_IRQHandler+0x82>
 8000356:	bf00      	nop

08000358 <HAL_ADC_ErrorCallback>:
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop

0800035c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800035c:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800035e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8000362:	4618      	mov	r0, r3
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000368:	629a      	str	r2, [r3, #40]	; 0x28
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800036a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800036c:	f042 0204 	orr.w	r2, r2, #4
 8000370:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_ADC_ErrorCallback(hadc); 
 8000372:	f7ff fff1 	bl	8000358 <HAL_ADC_ErrorCallback>
}
 8000376:	bd08      	pop	{r3, pc}

08000378 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000378:	2200      	movs	r2, #0
{ 
 800037a:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hadc);
 800037c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 8000380:	b083      	sub	sp, #12
  __HAL_LOCK(hadc);
 8000382:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 8000384:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8000386:	d05f      	beq.n	8000448 <HAL_ADC_ConfigChannel+0xd0>
 8000388:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 800038a:	684d      	ldr	r5, [r1, #4]
 800038c:	6804      	ldr	r4, [r0, #0]
 800038e:	2d06      	cmp	r5, #6
  __HAL_LOCK(hadc);
 8000390:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8000394:	680a      	ldr	r2, [r1, #0]
 8000396:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800039a:	f04f 061f 	mov.w	r6, #31
  if (sConfig->Rank < 7U)
 800039e:	d925      	bls.n	80003ec <HAL_ADC_ConfigChannel+0x74>
  else if (sConfig->Rank < 13U)
 80003a0:	2d0c      	cmp	r5, #12
 80003a2:	d847      	bhi.n	8000434 <HAL_ADC_ConfigChannel+0xbc>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80003a4:	3b23      	subs	r3, #35	; 0x23
 80003a6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80003a8:	409e      	lsls	r6, r3
 80003aa:	ea25 0506 	bic.w	r5, r5, r6
 80003ae:	fa02 f303 	lsl.w	r3, r2, r3
 80003b2:	432b      	orrs	r3, r5
 80003b4:	6323      	str	r3, [r4, #48]	; 0x30
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80003b6:	2a09      	cmp	r2, #9
 80003b8:	688b      	ldr	r3, [r1, #8]
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80003ba:	f04f 0607 	mov.w	r6, #7
 80003be:	eb02 0142 	add.w	r1, r2, r2, lsl #1
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80003c2:	d923      	bls.n	800040c <HAL_ADC_ConfigChannel+0x94>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80003c4:	391e      	subs	r1, #30
 80003c6:	68e5      	ldr	r5, [r4, #12]
 80003c8:	408e      	lsls	r6, r1
 80003ca:	408b      	lsls	r3, r1
 80003cc:	ea25 0106 	bic.w	r1, r5, r6
 80003d0:	430b      	orrs	r3, r1
 80003d2:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80003d4:	f1a2 0310 	sub.w	r3, r2, #16
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d922      	bls.n	8000422 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003dc:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 80003de:	2200      	movs	r2, #0
 80003e0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	b003      	add	sp, #12
 80003e8:	bc70      	pop	{r4, r5, r6}
 80003ea:	4770      	bx	lr
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80003ec:	3b05      	subs	r3, #5
 80003ee:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80003f0:	409e      	lsls	r6, r3
 80003f2:	ea25 0506 	bic.w	r5, r5, r6
 80003f6:	fa02 f303 	lsl.w	r3, r2, r3
 80003fa:	432b      	orrs	r3, r5
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80003fc:	2a09      	cmp	r2, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80003fe:	6363      	str	r3, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000400:	f04f 0607 	mov.w	r6, #7
 8000404:	688b      	ldr	r3, [r1, #8]
 8000406:	eb02 0142 	add.w	r1, r2, r2, lsl #1
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800040a:	d8db      	bhi.n	80003c4 <HAL_ADC_ConfigChannel+0x4c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800040c:	6925      	ldr	r5, [r4, #16]
 800040e:	408e      	lsls	r6, r1
 8000410:	408b      	lsls	r3, r1
 8000412:	ea25 0106 	bic.w	r1, r5, r6
 8000416:	430b      	orrs	r3, r1
 8000418:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800041a:	f1a2 0310 	sub.w	r3, r2, #16
 800041e:	2b01      	cmp	r3, #1
 8000420:	d8dc      	bhi.n	80003dc <HAL_ADC_ConfigChannel+0x64>
    if (hadc->Instance == ADC1)
 8000422:	4b1a      	ldr	r3, [pc, #104]	; (800048c <HAL_ADC_ConfigChannel+0x114>)
 8000424:	429c      	cmp	r4, r3
 8000426:	d014      	beq.n	8000452 <HAL_ADC_ConfigChannel+0xda>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000428:	6a82      	ldr	r2, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800042a:	2301      	movs	r3, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800042c:	f042 0220 	orr.w	r2, r2, #32
 8000430:	6282      	str	r2, [r0, #40]	; 0x28
 8000432:	e7d4      	b.n	80003de <HAL_ADC_ConfigChannel+0x66>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000434:	3b41      	subs	r3, #65	; 0x41
 8000436:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8000438:	409e      	lsls	r6, r3
 800043a:	ea25 0506 	bic.w	r5, r5, r6
 800043e:	fa02 f303 	lsl.w	r3, r2, r3
 8000442:	432b      	orrs	r3, r5
 8000444:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000446:	e7b6      	b.n	80003b6 <HAL_ADC_ConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 8000448:	2302      	movs	r3, #2
}
 800044a:	4618      	mov	r0, r3
 800044c:	b003      	add	sp, #12
 800044e:	bc70      	pop	{r4, r5, r6}
 8000450:	4770      	bx	lr
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000452:	68a3      	ldr	r3, [r4, #8]
 8000454:	021b      	lsls	r3, r3, #8
 8000456:	d4c1      	bmi.n	80003dc <HAL_ADC_ConfigChannel+0x64>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000458:	68a3      	ldr	r3, [r4, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800045a:	2a10      	cmp	r2, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800045c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000460:	60a3      	str	r3, [r4, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000462:	d1bb      	bne.n	80003dc <HAL_ADC_ConfigChannel+0x64>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000464:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <HAL_ADC_ConfigChannel+0x118>)
 8000466:	4a0b      	ldr	r2, [pc, #44]	; (8000494 <HAL_ADC_ConfigChannel+0x11c>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	fba2 2303 	umull	r2, r3, r2, r3
 800046e:	0c9b      	lsrs	r3, r3, #18
 8000470:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000478:	9b01      	ldr	r3, [sp, #4]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d0ae      	beq.n	80003dc <HAL_ADC_ConfigChannel+0x64>
            wait_loop_index--;
 800047e:	9b01      	ldr	r3, [sp, #4]
 8000480:	3b01      	subs	r3, #1
 8000482:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000484:	9b01      	ldr	r3, [sp, #4]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d1f9      	bne.n	800047e <HAL_ADC_ConfigChannel+0x106>
 800048a:	e7a7      	b.n	80003dc <HAL_ADC_ConfigChannel+0x64>
 800048c:	40012400 	.word	0x40012400
 8000490:	20000008 	.word	0x20000008
 8000494:	431bde83 	.word	0x431bde83

08000498 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8000498:	2300      	movs	r3, #0
{
 800049a:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800049c:	6802      	ldr	r2, [r0, #0]
{
 800049e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80004a0:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80004a2:	6893      	ldr	r3, [r2, #8]
 80004a4:	07db      	lsls	r3, r3, #31
 80004a6:	d421      	bmi.n	80004ec <ADC_Enable+0x54>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80004a8:	4b18      	ldr	r3, [pc, #96]	; (800050c <ADC_Enable+0x74>)
 80004aa:	4c19      	ldr	r4, [pc, #100]	; (8000510 <ADC_Enable+0x78>)
 80004ac:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 80004ae:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80004b0:	fba4 4303 	umull	r4, r3, r4, r3
    __HAL_ADC_ENABLE(hadc);
 80004b4:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80004b8:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 80004ba:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80004bc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80004be:	9b01      	ldr	r3, [sp, #4]
 80004c0:	b12b      	cbz	r3, 80004ce <ADC_Enable+0x36>
      wait_loop_index--;
 80004c2:	9b01      	ldr	r3, [sp, #4]
 80004c4:	3b01      	subs	r3, #1
 80004c6:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80004c8:	9b01      	ldr	r3, [sp, #4]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d1f9      	bne.n	80004c2 <ADC_Enable+0x2a>
 80004ce:	4605      	mov	r5, r0
    tickstart = HAL_GetTick();
 80004d0:	f7ff fe7c 	bl	80001cc <HAL_GetTick>
 80004d4:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80004d6:	e004      	b.n	80004e2 <ADC_Enable+0x4a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80004d8:	f7ff fe78 	bl	80001cc <HAL_GetTick>
 80004dc:	1b80      	subs	r0, r0, r6
 80004de:	2802      	cmp	r0, #2
 80004e0:	d807      	bhi.n	80004f2 <ADC_Enable+0x5a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80004e2:	682b      	ldr	r3, [r5, #0]
 80004e4:	689c      	ldr	r4, [r3, #8]
 80004e6:	f014 0401 	ands.w	r4, r4, #1
 80004ea:	d0f5      	beq.n	80004d8 <ADC_Enable+0x40>
  return HAL_OK;
 80004ec:	2000      	movs	r0, #0
}
 80004ee:	b002      	add	sp, #8
 80004f0:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_UNLOCK(hadc);
 80004f2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004f4:	6aab      	ldr	r3, [r5, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80004f6:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004fa:	f043 0310 	orr.w	r3, r3, #16
 80004fe:	62ab      	str	r3, [r5, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000500:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000502:	4303      	orrs	r3, r0
 8000504:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 8000506:	b002      	add	sp, #8
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	bf00      	nop
 800050c:	20000008 	.word	0x20000008
 8000510:	431bde83 	.word	0x431bde83

08000514 <HAL_ADC_Start_DMA>:
{
 8000514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000516:	4b40      	ldr	r3, [pc, #256]	; (8000618 <HAL_ADC_Start_DMA+0x104>)
 8000518:	6804      	ldr	r4, [r0, #0]
 800051a:	429c      	cmp	r4, r3
 800051c:	d016      	beq.n	800054c <HAL_ADC_Start_DMA+0x38>
 800051e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000522:	429c      	cmp	r4, r3
 8000524:	d012      	beq.n	800054c <HAL_ADC_Start_DMA+0x38>
    __HAL_LOCK(hadc);
 8000526:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800052a:	2b01      	cmp	r3, #1
 800052c:	d063      	beq.n	80005f6 <HAL_ADC_Start_DMA+0xe2>
 800052e:	2301      	movs	r3, #1
 8000530:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8000534:	4617      	mov	r7, r2
 8000536:	460e      	mov	r6, r1
 8000538:	4604      	mov	r4, r0
    tmp_hal_status = ADC_Enable(hadc);
 800053a:	f7ff ffad 	bl	8000498 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800053e:	4605      	mov	r5, r0
 8000540:	b160      	cbz	r0, 800055c <HAL_ADC_Start_DMA+0x48>
      __HAL_UNLOCK(hadc);
 8000542:	2300      	movs	r3, #0
}
 8000544:	4628      	mov	r0, r5
      __HAL_UNLOCK(hadc);
 8000546:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800054a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800054c:	4b32      	ldr	r3, [pc, #200]	; (8000618 <HAL_ADC_Start_DMA+0x104>)
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000554:	d0e7      	beq.n	8000526 <HAL_ADC_Start_DMA+0x12>
    tmp_hal_status = HAL_ERROR;
 8000556:	2501      	movs	r5, #1
}
 8000558:	4628      	mov	r0, r5
 800055a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 800055c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800055e:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8000560:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000564:	4a2d      	ldr	r2, [pc, #180]	; (800061c <HAL_ADC_Start_DMA+0x108>)
      ADC_STATE_CLR_SET(hadc->State,
 8000566:	f023 0301 	bic.w	r3, r3, #1
 800056a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800056e:	4291      	cmp	r1, r2
      ADC_STATE_CLR_SET(hadc->State,
 8000570:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000572:	d043      	beq.n	80005fc <HAL_ADC_Start_DMA+0xe8>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000574:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000576:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800057a:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800057c:	684b      	ldr	r3, [r1, #4]
 800057e:	055a      	lsls	r2, r3, #21
 8000580:	d505      	bpl.n	800058e <HAL_ADC_Start_DMA+0x7a>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000582:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000584:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000588:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800058c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800058e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000590:	f06f 0202 	mvn.w	r2, #2
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000594:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000598:	bf18      	it	ne
 800059a:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800059c:	6a20      	ldr	r0, [r4, #32]
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800059e:	bf18      	it	ne
 80005a0:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80005a4:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 80005a6:	2300      	movs	r3, #0
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80005a8:	f8df c078 	ldr.w	ip, [pc, #120]	; 8000624 <HAL_ADC_Start_DMA+0x110>
      __HAL_UNLOCK(hadc);
 80005ac:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80005b0:	4b1b      	ldr	r3, [pc, #108]	; (8000620 <HAL_ADC_Start_DMA+0x10c>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80005b2:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80005b4:	e9c0 c30a 	strd	ip, r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80005b8:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8000628 <HAL_ADC_Start_DMA+0x114>
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80005bc:	463b      	mov	r3, r7
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80005be:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80005c2:	f841 2c4c 	str.w	r2, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80005c6:	f851 7c44 	ldr.w	r7, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80005ca:	4632      	mov	r2, r6
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80005cc:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 80005d0:	f841 7c44 	str.w	r7, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80005d4:	f000 f994 	bl	8000900 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80005d8:	6822      	ldr	r2, [r4, #0]
}
 80005da:	4628      	mov	r0, r5
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80005dc:	6893      	ldr	r3, [r2, #8]
 80005de:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80005e2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80005e6:	6893      	ldr	r3, [r2, #8]
 80005e8:	bf0c      	ite	eq
 80005ea:	f443 03a0 	orreq.w	r3, r3, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80005ee:	f443 1380 	orrne.w	r3, r3, #1048576	; 0x100000
 80005f2:	6093      	str	r3, [r2, #8]
}
 80005f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80005f6:	2502      	movs	r5, #2
}
 80005f8:	4628      	mov	r0, r5
 80005fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <HAL_ADC_Start_DMA+0x104>)
 80005fe:	685a      	ldr	r2, [r3, #4]
 8000600:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000604:	d0b6      	beq.n	8000574 <HAL_ADC_Start_DMA+0x60>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000606:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000608:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800060c:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	055b      	lsls	r3, r3, #21
 8000612:	d5bc      	bpl.n	800058e <HAL_ADC_Start_DMA+0x7a>
 8000614:	e7b5      	b.n	8000582 <HAL_ADC_Start_DMA+0x6e>
 8000616:	bf00      	nop
 8000618:	40012400 	.word	0x40012400
 800061c:	40012800 	.word	0x40012800
 8000620:	08000251 	.word	0x08000251
 8000624:	080001fd 	.word	0x080001fd
 8000628:	0800035d 	.word	0x0800035d

0800062c <ADC_ConversionStop_Disable>:
{
 800062c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800062e:	6803      	ldr	r3, [r0, #0]
 8000630:	689a      	ldr	r2, [r3, #8]
 8000632:	07d2      	lsls	r2, r2, #31
 8000634:	d401      	bmi.n	800063a <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8000636:	2000      	movs	r0, #0
}
 8000638:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800063a:	689a      	ldr	r2, [r3, #8]
 800063c:	4604      	mov	r4, r0
 800063e:	f022 0201 	bic.w	r2, r2, #1
 8000642:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000644:	f7ff fdc2 	bl	80001cc <HAL_GetTick>
 8000648:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800064a:	6823      	ldr	r3, [r4, #0]
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	07db      	lsls	r3, r3, #31
 8000650:	d5f1      	bpl.n	8000636 <ADC_ConversionStop_Disable+0xa>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000652:	f7ff fdbb 	bl	80001cc <HAL_GetTick>
 8000656:	1b40      	subs	r0, r0, r5
 8000658:	2802      	cmp	r0, #2
 800065a:	d9f6      	bls.n	800064a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800065c:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800065e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000660:	f043 0310 	orr.w	r3, r3, #16
 8000664:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000666:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000668:	4303      	orrs	r3, r0
 800066a:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800066c:	bd38      	pop	{r3, r4, r5, pc}
 800066e:	bf00      	nop

08000670 <HAL_ADC_Init>:
  if(hadc == NULL)
 8000670:	2800      	cmp	r0, #0
 8000672:	d057      	beq.n	8000724 <HAL_ADC_Init+0xb4>
{
 8000674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000676:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000678:	4604      	mov	r4, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d045      	beq.n	800070a <HAL_ADC_Init+0x9a>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800067e:	4620      	mov	r0, r4
 8000680:	f7ff ffd4 	bl	800062c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000684:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000686:	f013 0310 	ands.w	r3, r3, #16
 800068a:	d138      	bne.n	80006fe <HAL_ADC_Init+0x8e>
 800068c:	2800      	cmp	r0, #0
 800068e:	d136      	bne.n	80006fe <HAL_ADC_Init+0x8e>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000690:	e9d4 5702 	ldrd	r5, r7, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000694:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000696:	69e6      	ldr	r6, [r4, #28]
 8000698:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800069a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800069e:	f022 0202 	bic.w	r2, r2, #2
 80006a2:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80006a6:	4331      	orrs	r1, r6
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80006a8:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    ADC_STATE_CLR_SET(hadc->State,
 80006ac:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80006ae:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
 80006b2:	6966      	ldr	r6, [r4, #20]
 80006b4:	6822      	ldr	r2, [r4, #0]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80006b6:	d037      	beq.n	8000728 <HAL_ADC_Init+0xb8>
 80006b8:	2d01      	cmp	r5, #1
 80006ba:	d04f      	beq.n	800075c <HAL_ADC_Init+0xec>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80006bc:	2e01      	cmp	r6, #1
 80006be:	d052      	beq.n	8000766 <HAL_ADC_Init+0xf6>
      MODIFY_REG(hadc->Instance->CR1,
 80006c0:	6855      	ldr	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80006c2:	4b3c      	ldr	r3, [pc, #240]	; (80007b4 <HAL_ADC_Init+0x144>)
      MODIFY_REG(hadc->Instance->CR1,
 80006c4:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80006c8:	6055      	str	r5, [r2, #4]
  uint32_t tmp_sqr1 = 0U;
 80006ca:	4605      	mov	r5, r0
      MODIFY_REG(hadc->Instance->CR2,
 80006cc:	6896      	ldr	r6, [r2, #8]
 80006ce:	4033      	ands	r3, r6
 80006d0:	430b      	orrs	r3, r1
 80006d2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hadc->Instance->SQR1,
 80006d4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80006d6:	4e38      	ldr	r6, [pc, #224]	; (80007b8 <HAL_ADC_Init+0x148>)
    MODIFY_REG(hadc->Instance->SQR1,
 80006d8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80006dc:	432b      	orrs	r3, r5
 80006de:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80006e0:	6893      	ldr	r3, [r2, #8]
 80006e2:	401e      	ands	r6, r3
 80006e4:	42b1      	cmp	r1, r6
 80006e6:	d030      	beq.n	800074a <HAL_ADC_Init+0xda>
      tmp_hal_status = HAL_ERROR;
 80006e8:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80006ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006ec:	f023 0312 	bic.w	r3, r3, #18
 80006f0:	f043 0310 	orr.w	r3, r3, #16
 80006f4:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80006f8:	4303      	orrs	r3, r0
 80006fa:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80006fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80006fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8000700:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000702:	f043 0310 	orr.w	r3, r3, #16
 8000706:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8000708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 800070a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800070c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000710:	f002 f85a 	bl	80027c8 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000714:	4620      	mov	r0, r4
 8000716:	f7ff ff89 	bl	800062c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800071a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800071c:	f013 0310 	ands.w	r3, r3, #16
 8000720:	d1ed      	bne.n	80006fe <HAL_ADC_Init+0x8e>
 8000722:	e7b3      	b.n	800068c <HAL_ADC_Init+0x1c>
    return HAL_ERROR;
 8000724:	2001      	movs	r0, #1
}
 8000726:	4770      	bx	lr
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000728:	2e01      	cmp	r6, #1
 800072a:	d03f      	beq.n	80007ac <HAL_ADC_Init+0x13c>
      MODIFY_REG(hadc->Instance->CR1,
 800072c:	6855      	ldr	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800072e:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <HAL_ADC_Init+0x144>)
      MODIFY_REG(hadc->Instance->CR1,
 8000730:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000734:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8000738:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800073a:	6895      	ldr	r5, [r2, #8]
 800073c:	402b      	ands	r3, r5
 800073e:	430b      	orrs	r3, r1
 8000740:	6093      	str	r3, [r2, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000742:	6923      	ldr	r3, [r4, #16]
 8000744:	3b01      	subs	r3, #1
 8000746:	051d      	lsls	r5, r3, #20
 8000748:	e7c4      	b.n	80006d4 <HAL_ADC_Init+0x64>
      ADC_CLEAR_ERRORCODE(hadc);
 800074a:	2300      	movs	r3, #0
 800074c:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800074e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000750:	f023 0303 	bic.w	r3, r3, #3
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800075a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800075c:	2e01      	cmp	r6, #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800075e:	bf08      	it	eq
 8000760:	f44f 7380 	moveq.w	r3, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000764:	d1e2      	bne.n	800072c <HAL_ADC_Init+0xbc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000766:	b1d7      	cbz	r7, 800079e <HAL_ADC_Init+0x12e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000768:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800076a:	f046 0620 	orr.w	r6, r6, #32
 800076e:	62a6      	str	r6, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000772:	f046 0601 	orr.w	r6, r6, #1
 8000776:	62e6      	str	r6, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8000778:	6857      	ldr	r7, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800077a:	4e0e      	ldr	r6, [pc, #56]	; (80007b4 <HAL_ADC_Init+0x144>)
      MODIFY_REG(hadc->Instance->CR1,
 800077c:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 8000780:	433b      	orrs	r3, r7
 8000782:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000784:	6893      	ldr	r3, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000786:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR2,
 800078a:	ea06 0603 	and.w	r6, r6, r3
 800078e:	ea46 0601 	orr.w	r6, r6, r1
 8000792:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000794:	d0d5      	beq.n	8000742 <HAL_ADC_Init+0xd2>
 8000796:	2d01      	cmp	r5, #1
 8000798:	d0d3      	beq.n	8000742 <HAL_ADC_Init+0xd2>
  uint32_t tmp_sqr1 = 0U;
 800079a:	2500      	movs	r5, #0
 800079c:	e79a      	b.n	80006d4 <HAL_ADC_Init+0x64>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800079e:	69a6      	ldr	r6, [r4, #24]
 80007a0:	3e01      	subs	r6, #1
 80007a2:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
 80007a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007aa:	e7e5      	b.n	8000778 <HAL_ADC_Init+0x108>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80007ac:	462b      	mov	r3, r5
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80007ae:	2f00      	cmp	r7, #0
 80007b0:	d1da      	bne.n	8000768 <HAL_ADC_Init+0xf8>
 80007b2:	e7f4      	b.n	800079e <HAL_ADC_Init+0x12e>
 80007b4:	ffe1f7fd 	.word	0xffe1f7fd
 80007b8:	ff1f0efe 	.word	0xff1f0efe

080007bc <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop

080007c0 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c0:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c4:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80007c6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80007ca:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ce:	400b      	ands	r3, r1
 80007d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80007d8:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80007da:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007e6:	b430      	push	{r4, r5}
 80007e8:	68db      	ldr	r3, [r3, #12]
 80007ea:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ee:	f1c3 0507 	rsb	r5, r3, #7
 80007f2:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f4:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007f8:	bf28      	it	cs
 80007fa:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007fc:	2c06      	cmp	r4, #6
 80007fe:	d919      	bls.n	8000834 <HAL_NVIC_SetPriority+0x50>
 8000800:	f04f 34ff 	mov.w	r4, #4294967295
 8000804:	3b03      	subs	r3, #3
 8000806:	409c      	lsls	r4, r3
 8000808:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	f04f 32ff 	mov.w	r2, #4294967295
 8000810:	40aa      	lsls	r2, r5
 8000812:	ea21 0102 	bic.w	r1, r1, r2
 8000816:	fa01 f203 	lsl.w	r2, r1, r3
 800081a:	4322      	orrs	r2, r4
 800081c:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) < 0)
 800081e:	2800      	cmp	r0, #0
 8000820:	b2d2      	uxtb	r2, r2
 8000822:	db0a      	blt.n	800083a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000824:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000828:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800082c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000830:	bc30      	pop	{r4, r5}
 8000832:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000834:	2400      	movs	r4, #0
 8000836:	4623      	mov	r3, r4
 8000838:	e7e8      	b.n	800080c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083a:	4b04      	ldr	r3, [pc, #16]	; (800084c <HAL_NVIC_SetPriority+0x68>)
 800083c:	f000 000f 	and.w	r0, r0, #15
 8000840:	4403      	add	r3, r0
 8000842:	761a      	strb	r2, [r3, #24]
 8000844:	bc30      	pop	{r4, r5}
 8000846:	4770      	bx	lr
 8000848:	e000ed00 	.word	0xe000ed00
 800084c:	e000ecfc 	.word	0xe000ecfc

08000850 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000850:	2301      	movs	r3, #1
 8000852:	f000 011f 	and.w	r1, r0, #31
 8000856:	4a03      	ldr	r2, [pc, #12]	; (8000864 <HAL_NVIC_EnableIRQ+0x14>)
 8000858:	0940      	lsrs	r0, r0, #5
 800085a:	408b      	lsls	r3, r1
 800085c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000e100 	.word	0xe000e100

08000868 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000868:	3801      	subs	r0, #1
 800086a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800086e:	d20d      	bcs.n	800088c <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000870:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000872:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000874:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000876:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087a:	4c06      	ldr	r4, [pc, #24]	; (8000894 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800087c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087e:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000882:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8000884:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000886:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000888:	6019      	str	r1, [r3, #0]
 800088a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800088c:	2001      	movs	r0, #1
 800088e:	4770      	bx	lr
 8000890:	e000e010 	.word	0xe000e010
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000898:	b350      	cbz	r0, 80008f0 <HAL_DMA_Init+0x58>
 800089a:	4602      	mov	r2, r0
{
 800089c:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800089e:	e9d0 3601 	ldrd	r3, r6, [r0, #4]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008a2:	2400      	movs	r4, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80008a4:	2501      	movs	r5, #1
  tmp |=  hdma->Init.Direction        |
 80008a6:	4333      	orrs	r3, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008a8:	68d6      	ldr	r6, [r2, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80008aa:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008ac:	4333      	orrs	r3, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80008ae:	4911      	ldr	r1, [pc, #68]	; (80008f4 <HAL_DMA_Init+0x5c>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008b0:	6916      	ldr	r6, [r2, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80008b2:	4f11      	ldr	r7, [pc, #68]	; (80008f8 <HAL_DMA_Init+0x60>)
 80008b4:	4401      	add	r1, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008b6:	4333      	orrs	r3, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008b8:	6956      	ldr	r6, [r2, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80008ba:	fba7 7101 	umull	r7, r1, r7, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008be:	4333      	orrs	r3, r6
 80008c0:	6996      	ldr	r6, [r2, #24]
          hdma->Init.Mode                | hdma->Init.Priority;
 80008c2:	69d7      	ldr	r7, [r2, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008c4:	4333      	orrs	r3, r6
  tmp = hdma->Instance->CCR;
 80008c6:	6806      	ldr	r6, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80008c8:	0909      	lsrs	r1, r1, #4
 80008ca:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80008cc:	f426 567f 	bic.w	r6, r6, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 80008d0:	433b      	orrs	r3, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80008d2:	f026 0630 	bic.w	r6, r6, #48	; 0x30
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80008d6:	6411      	str	r1, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80008d8:	4908      	ldr	r1, [pc, #32]	; (80008fc <HAL_DMA_Init+0x64>)
  tmp |=  hdma->Init.Direction        |
 80008da:	4333      	orrs	r3, r6
  hdma->DmaBaseAddress = DMA1;
 80008dc:	63d1      	str	r1, [r2, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 80008de:	6003      	str	r3, [r0, #0]
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;

  return HAL_OK;
 80008e0:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008e2:	6394      	str	r4, [r2, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 80008e4:	f882 4020 	strb.w	r4, [r2, #32]
  hdma->State = HAL_DMA_STATE_READY;
 80008e8:	f882 5021 	strb.w	r5, [r2, #33]	; 0x21
}
 80008ec:	bcf0      	pop	{r4, r5, r6, r7}
 80008ee:	4770      	bx	lr
    return HAL_ERROR;
 80008f0:	2001      	movs	r0, #1
}
 80008f2:	4770      	bx	lr
 80008f4:	bffdfff8 	.word	0xbffdfff8
 80008f8:	cccccccd 	.word	0xcccccccd
 80008fc:	40020000 	.word	0x40020000

08000900 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000900:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000902:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000906:	2c01      	cmp	r4, #1
 8000908:	d032      	beq.n	8000970 <HAL_DMA_Start_IT+0x70>
 800090a:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800090c:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000910:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000914:	42a5      	cmp	r5, r4
 8000916:	d125      	bne.n	8000964 <HAL_DMA_Start_IT+0x64>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000918:	2600      	movs	r6, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800091a:	f04f 0e02 	mov.w	lr, #2
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800091e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000920:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000922:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000924:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8000926:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 800092a:	40bd      	lsls	r5, r7
    __HAL_DMA_DISABLE(hdma);
 800092c:	f026 0601 	bic.w	r6, r6, #1

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000930:	6847      	ldr	r7, [r0, #4]
    hdma->State = HAL_DMA_STATE_BUSY;
 8000932:	f880 e021 	strb.w	lr, [r0, #33]	; 0x21
    __HAL_DMA_DISABLE(hdma);
 8000936:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000938:	f8cc 5004 	str.w	r5, [ip, #4]
  hdma->Instance->CNDTR = DataLength;
 800093c:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 800093e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000940:	2f10      	cmp	r7, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000942:	bf0b      	itete	eq
 8000944:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000946:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000948:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800094a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800094c:	b19b      	cbz	r3, 8000976 <HAL_DMA_Start_IT+0x76>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800094e:	6823      	ldr	r3, [r4, #0]
 8000950:	f043 030e 	orr.w	r3, r3, #14
 8000954:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000956:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 8000958:	6822      	ldr	r2, [r4, #0]
}
 800095a:	4618      	mov	r0, r3
    __HAL_DMA_ENABLE(hdma);
 800095c:	f042 0201 	orr.w	r2, r2, #1
 8000960:	6022      	str	r2, [r4, #0]
}
 8000962:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hdma); 
 8000964:	2200      	movs	r2, #0
    status = HAL_BUSY;
 8000966:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma); 
 8000968:	f880 2020 	strb.w	r2, [r0, #32]
}
 800096c:	4618      	mov	r0, r3
 800096e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8000970:	2302      	movs	r3, #2
}
 8000972:	4618      	mov	r0, r3
 8000974:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000976:	6823      	ldr	r3, [r4, #0]
 8000978:	f023 0304 	bic.w	r3, r3, #4
 800097c:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800097e:	6823      	ldr	r3, [r4, #0]
 8000980:	f043 030a 	orr.w	r3, r3, #10
 8000984:	6023      	str	r3, [r4, #0]
 8000986:	e7e6      	b.n	8000956 <HAL_DMA_Start_IT+0x56>

08000988 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000988:	2204      	movs	r2, #4
{
 800098a:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800098c:	e9d0 610f 	ldrd	r6, r1, [r0, #60]	; 0x3c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000990:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000992:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000994:	408a      	lsls	r2, r1
 8000996:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 8000998:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800099a:	d01f      	beq.n	80009dc <HAL_DMA_IRQHandler+0x54>
 800099c:	076a      	lsls	r2, r5, #29
 800099e:	d51d      	bpl.n	80009dc <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	0691      	lsls	r1, r2, #26
 80009a4:	d403      	bmi.n	80009ae <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	f022 0204 	bic.w	r2, r2, #4
 80009ac:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80009ae:	4a3f      	ldr	r2, [pc, #252]	; (8000aac <HAL_DMA_IRQHandler+0x124>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d05c      	beq.n	8000a6e <HAL_DMA_IRQHandler+0xe6>
 80009b4:	3214      	adds	r2, #20
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d061      	beq.n	8000a7e <HAL_DMA_IRQHandler+0xf6>
 80009ba:	3214      	adds	r2, #20
 80009bc:	4293      	cmp	r3, r2
 80009be:	d068      	beq.n	8000a92 <HAL_DMA_IRQHandler+0x10a>
 80009c0:	3214      	adds	r2, #20
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d06b      	beq.n	8000a9e <HAL_DMA_IRQHandler+0x116>
 80009c6:	3214      	adds	r2, #20
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d05d      	beq.n	8000a88 <HAL_DMA_IRQHandler+0x100>
 80009cc:	3214      	adds	r2, #20
 80009ce:	4293      	cmp	r3, r2
 80009d0:	bf0c      	ite	eq
 80009d2:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80009d6:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80009da:	e049      	b.n	8000a70 <HAL_DMA_IRQHandler+0xe8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80009dc:	2202      	movs	r2, #2
 80009de:	408a      	lsls	r2, r1
 80009e0:	4222      	tst	r2, r4
 80009e2:	d022      	beq.n	8000a2a <HAL_DMA_IRQHandler+0xa2>
 80009e4:	07aa      	lsls	r2, r5, #30
 80009e6:	d520      	bpl.n	8000a2a <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	0691      	lsls	r1, r2, #26
 80009ec:	d406      	bmi.n	80009fc <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 80009ee:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	f022 020a 	bic.w	r2, r2, #10
 80009f6:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80009f8:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80009fc:	4a2b      	ldr	r2, [pc, #172]	; (8000aac <HAL_DMA_IRQHandler+0x124>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d02b      	beq.n	8000a5a <HAL_DMA_IRQHandler+0xd2>
 8000a02:	3214      	adds	r2, #20
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d042      	beq.n	8000a8e <HAL_DMA_IRQHandler+0x106>
 8000a08:	3214      	adds	r2, #20
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d044      	beq.n	8000a98 <HAL_DMA_IRQHandler+0x110>
 8000a0e:	3214      	adds	r2, #20
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d036      	beq.n	8000a82 <HAL_DMA_IRQHandler+0xfa>
 8000a14:	3214      	adds	r2, #20
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d044      	beq.n	8000aa4 <HAL_DMA_IRQHandler+0x11c>
 8000a1a:	3214      	adds	r2, #20
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	bf0c      	ite	eq
 8000a20:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8000a24:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000a28:	e018      	b.n	8000a5c <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	408a      	lsls	r2, r1
 8000a2e:	4222      	tst	r2, r4
 8000a30:	d01b      	beq.n	8000a6a <HAL_DMA_IRQHandler+0xe2>
 8000a32:	072a      	lsls	r2, r5, #28
 8000a34:	d519      	bpl.n	8000a6a <HAL_DMA_IRQHandler+0xe2>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a36:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8000a38:	2500      	movs	r5, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a3a:	681c      	ldr	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a3c:	fa02 f101 	lsl.w	r1, r2, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a40:	f024 040e 	bic.w	r4, r4, #14
 8000a44:	601c      	str	r4, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 8000a46:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a48:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000a4a:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000a4c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000a50:	f880 5020 	strb.w	r5, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000a54:	b14b      	cbz	r3, 8000a6a <HAL_DMA_IRQHandler+0xe2>
}
 8000a56:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000a58:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000a5a:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8000a5c:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000a5e:	4c14      	ldr	r4, [pc, #80]	; (8000ab0 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferCpltCallback != NULL)
 8000a60:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000a62:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000a64:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000a68:	b93a      	cbnz	r2, 8000a7a <HAL_DMA_IRQHandler+0xf2>
}
 8000a6a:	bc70      	pop	{r4, r5, r6}
 8000a6c:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000a6e:	2304      	movs	r3, #4
 8000a70:	490f      	ldr	r1, [pc, #60]	; (8000ab0 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferHalfCpltCallback != NULL)
 8000a72:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000a74:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000a76:	2a00      	cmp	r2, #0
 8000a78:	d0f7      	beq.n	8000a6a <HAL_DMA_IRQHandler+0xe2>
}
 8000a7a:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8000a7c:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000a7e:	2340      	movs	r3, #64	; 0x40
 8000a80:	e7f6      	b.n	8000a70 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000a82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a86:	e7e9      	b.n	8000a5c <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000a88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000a8c:	e7f0      	b.n	8000a70 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000a8e:	2320      	movs	r3, #32
 8000a90:	e7e4      	b.n	8000a5c <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a96:	e7eb      	b.n	8000a70 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a9c:	e7de      	b.n	8000a5c <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000a9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000aa2:	e7e5      	b.n	8000a70 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000aa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000aa8:	e7d8      	b.n	8000a5c <HAL_DMA_IRQHandler+0xd4>
 8000aaa:	bf00      	nop
 8000aac:	40020008 	.word	0x40020008
 8000ab0:	40020000 	.word	0x40020000

08000ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000ab8:	f04f 0800 	mov.w	r8, #0
{
 8000abc:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000abe:	4644      	mov	r4, r8
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ac0:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8000c84 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ac4:	4e69      	ldr	r6, [pc, #420]	; (8000c6c <HAL_GPIO_Init+0x1b8>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ac6:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 8000c88 <HAL_GPIO_Init+0x1d4>
 8000aca:	e002      	b.n	8000ad2 <HAL_GPIO_Init+0x1e>
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000acc:	3401      	adds	r4, #1
 8000ace:	2c10      	cmp	r4, #16
 8000ad0:	d078      	beq.n	8000bc4 <HAL_GPIO_Init+0x110>
    ioposition = (0x01U << position);
 8000ad2:	2301      	movs	r3, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ad4:	680a      	ldr	r2, [r1, #0]
    ioposition = (0x01U << position);
 8000ad6:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ad8:	401a      	ands	r2, r3
    if (iocurrent == ioposition)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d1f6      	bne.n	8000acc <HAL_GPIO_Init+0x18>
      switch (GPIO_Init->Mode)
 8000ade:	684d      	ldr	r5, [r1, #4]
 8000ae0:	2d12      	cmp	r5, #18
 8000ae2:	f000 809c 	beq.w	8000c1e <HAL_GPIO_Init+0x16a>
 8000ae6:	d87e      	bhi.n	8000be6 <HAL_GPIO_Init+0x132>
 8000ae8:	2d02      	cmp	r5, #2
 8000aea:	f000 8094 	beq.w	8000c16 <HAL_GPIO_Init+0x162>
 8000aee:	d974      	bls.n	8000bda <HAL_GPIO_Init+0x126>
 8000af0:	2d03      	cmp	r5, #3
 8000af2:	f000 808d 	beq.w	8000c10 <HAL_GPIO_Init+0x15c>
 8000af6:	2d11      	cmp	r5, #17
 8000af8:	d102      	bne.n	8000b00 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000afa:	68cb      	ldr	r3, [r1, #12]
 8000afc:	f103 0804 	add.w	r8, r3, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b00:	2aff      	cmp	r2, #255	; 0xff
 8000b02:	d862      	bhi.n	8000bca <HAL_GPIO_Init+0x116>
 8000b04:	4682      	mov	sl, r0
 8000b06:	6803      	ldr	r3, [r0, #0]
 8000b08:	00a5      	lsls	r5, r4, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b0a:	f04f 090f 	mov.w	r9, #15
 8000b0e:	fa09 fb05 	lsl.w	fp, r9, r5
 8000b12:	ea23 030b 	bic.w	r3, r3, fp
 8000b16:	fa08 f505 	lsl.w	r5, r8, r5
 8000b1a:	432b      	orrs	r3, r5
 8000b1c:	f8ca 3000 	str.w	r3, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b20:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000b24:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000b28:	d0d0      	beq.n	8000acc <HAL_GPIO_Init+0x18>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b2a:	4f51      	ldr	r7, [pc, #324]	; (8000c70 <HAL_GPIO_Init+0x1bc>)
 8000b2c:	f024 0503 	bic.w	r5, r4, #3
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	61bb      	str	r3, [r7, #24]
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	9301      	str	r3, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000b48:	f004 0b03 	and.w	fp, r4, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b4c:	9b01      	ldr	r3, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000b4e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000b52:	68ab      	ldr	r3, [r5, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000b54:	fa09 f90b 	lsl.w	r9, r9, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b58:	4560      	cmp	r0, ip
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000b5a:	ea23 0309 	bic.w	r3, r3, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b5e:	d00f      	beq.n	8000b80 <HAL_GPIO_Init+0xcc>
 8000b60:	4570      	cmp	r0, lr
 8000b62:	d060      	beq.n	8000c26 <HAL_GPIO_Init+0x172>
 8000b64:	4f43      	ldr	r7, [pc, #268]	; (8000c74 <HAL_GPIO_Init+0x1c0>)
 8000b66:	42b8      	cmp	r0, r7
 8000b68:	d078      	beq.n	8000c5c <HAL_GPIO_Init+0x1a8>
 8000b6a:	4f43      	ldr	r7, [pc, #268]	; (8000c78 <HAL_GPIO_Init+0x1c4>)
 8000b6c:	42b8      	cmp	r0, r7
 8000b6e:	bf0c      	ite	eq
 8000b70:	f04f 0903 	moveq.w	r9, #3
 8000b74:	f04f 0904 	movne.w	r9, #4
 8000b78:	fa09 fb0b 	lsl.w	fp, r9, fp
 8000b7c:	ea43 030b 	orr.w	r3, r3, fp
        AFIO->EXTICR[position >> 2U] = temp;
 8000b80:	60ab      	str	r3, [r5, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000b82:	6833      	ldr	r3, [r6, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b84:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000b88:	bf14      	ite	ne
 8000b8a:	4313      	orrne	r3, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b8c:	4393      	biceq	r3, r2
 8000b8e:	6033      	str	r3, [r6, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000b90:	6873      	ldr	r3, [r6, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b92:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000b96:	bf14      	ite	ne
 8000b98:	4313      	orrne	r3, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b9a:	4393      	biceq	r3, r2
 8000b9c:	6073      	str	r3, [r6, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b9e:	68b3      	ldr	r3, [r6, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ba0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ba4:	bf14      	ite	ne
 8000ba6:	4313      	orrne	r3, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ba8:	4393      	biceq	r3, r2
 8000baa:	60b3      	str	r3, [r6, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bac:	68f3      	ldr	r3, [r6, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bae:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000bb2:	f104 0401 	add.w	r4, r4, #1
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bb6:	bf14      	ite	ne
 8000bb8:	431a      	orrne	r2, r3
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bba:	ea23 0202 	biceq.w	r2, r3, r2
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000bbe:	2c10      	cmp	r4, #16
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bc0:	60f2      	str	r2, [r6, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000bc2:	d186      	bne.n	8000ad2 <HAL_GPIO_Init+0x1e>
        }
      }
    }
  }
}
 8000bc4:	b003      	add	sp, #12
 8000bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bca:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
 8000bce:	3d08      	subs	r5, #8
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bd0:	6843      	ldr	r3, [r0, #4]
 8000bd2:	00ad      	lsls	r5, r5, #2
 8000bd4:	f100 0a04 	add.w	sl, r0, #4
 8000bd8:	e797      	b.n	8000b0a <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8000bda:	b1a5      	cbz	r5, 8000c06 <HAL_GPIO_Init+0x152>
 8000bdc:	2d01      	cmp	r5, #1
 8000bde:	d18f      	bne.n	8000b00 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000be0:	f8d1 800c 	ldr.w	r8, [r1, #12]
          break;
 8000be4:	e78c      	b.n	8000b00 <HAL_GPIO_Init+0x4c>
      switch (GPIO_Init->Mode)
 8000be6:	4f25      	ldr	r7, [pc, #148]	; (8000c7c <HAL_GPIO_Init+0x1c8>)
 8000be8:	42bd      	cmp	r5, r7
 8000bea:	d00c      	beq.n	8000c06 <HAL_GPIO_Init+0x152>
 8000bec:	d929      	bls.n	8000c42 <HAL_GPIO_Init+0x18e>
 8000bee:	4f24      	ldr	r7, [pc, #144]	; (8000c80 <HAL_GPIO_Init+0x1cc>)
 8000bf0:	42bd      	cmp	r5, r7
 8000bf2:	d008      	beq.n	8000c06 <HAL_GPIO_Init+0x152>
 8000bf4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000bf8:	42bd      	cmp	r5, r7
 8000bfa:	d004      	beq.n	8000c06 <HAL_GPIO_Init+0x152>
 8000bfc:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8000c8c <HAL_GPIO_Init+0x1d8>
 8000c00:	454d      	cmp	r5, r9
 8000c02:	f47f af7d 	bne.w	8000b00 <HAL_GPIO_Init+0x4c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c06:	688d      	ldr	r5, [r1, #8]
 8000c08:	b9a5      	cbnz	r5, 8000c34 <HAL_GPIO_Init+0x180>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c0a:	f04f 0804 	mov.w	r8, #4
 8000c0e:	e777      	b.n	8000b00 <HAL_GPIO_Init+0x4c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c10:	f04f 0800 	mov.w	r8, #0
 8000c14:	e774      	b.n	8000b00 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c16:	68cb      	ldr	r3, [r1, #12]
 8000c18:	f103 0808 	add.w	r8, r3, #8
          break;
 8000c1c:	e770      	b.n	8000b00 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c1e:	68cb      	ldr	r3, [r1, #12]
 8000c20:	f103 080c 	add.w	r8, r3, #12
          break;
 8000c24:	e76c      	b.n	8000b00 <HAL_GPIO_Init+0x4c>
 8000c26:	f04f 0901 	mov.w	r9, #1
 8000c2a:	fa09 fb0b 	lsl.w	fp, r9, fp
 8000c2e:	ea43 030b 	orr.w	r3, r3, fp
 8000c32:	e7a5      	b.n	8000b80 <HAL_GPIO_Init+0xcc>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c34:	2d01      	cmp	r5, #1
            GPIOx->BSRR = ioposition;
 8000c36:	bf0c      	ite	eq
 8000c38:	6103      	streq	r3, [r0, #16]
            GPIOx->BRR = ioposition;
 8000c3a:	6143      	strne	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c3c:	f04f 0808 	mov.w	r8, #8
 8000c40:	e75e      	b.n	8000b00 <HAL_GPIO_Init+0x4c>
      switch (GPIO_Init->Mode)
 8000c42:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8000c90 <HAL_GPIO_Init+0x1dc>
 8000c46:	454d      	cmp	r5, r9
 8000c48:	d0dd      	beq.n	8000c06 <HAL_GPIO_Init+0x152>
 8000c4a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000c4e:	454d      	cmp	r5, r9
 8000c50:	f47f af56 	bne.w	8000b00 <HAL_GPIO_Init+0x4c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c54:	688d      	ldr	r5, [r1, #8]
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d0d7      	beq.n	8000c0a <HAL_GPIO_Init+0x156>
 8000c5a:	e7eb      	b.n	8000c34 <HAL_GPIO_Init+0x180>
 8000c5c:	f04f 0902 	mov.w	r9, #2
 8000c60:	fa09 fb0b 	lsl.w	fp, r9, fp
 8000c64:	ea43 030b 	orr.w	r3, r3, fp
 8000c68:	e78a      	b.n	8000b80 <HAL_GPIO_Init+0xcc>
 8000c6a:	bf00      	nop
 8000c6c:	40010400 	.word	0x40010400
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40011000 	.word	0x40011000
 8000c78:	40011400 	.word	0x40011400
 8000c7c:	10210000 	.word	0x10210000
 8000c80:	10310000 	.word	0x10310000
 8000c84:	40010800 	.word	0x40010800
 8000c88:	40010c00 	.word	0x40010c00
 8000c8c:	10220000 	.word	0x10220000
 8000c90:	10110000 	.word	0x10110000

08000c94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c94:	b902      	cbnz	r2, 8000c98 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c96:	0409      	lsls	r1, r1, #16
 8000c98:	6101      	str	r1, [r0, #16]
  }
}
 8000c9a:	4770      	bx	lr

08000c9c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000c9c:	68c3      	ldr	r3, [r0, #12]
 8000c9e:	4059      	eors	r1, r3
 8000ca0:	60c1      	str	r1, [r0, #12]
}
 8000ca2:	4770      	bx	lr

08000ca4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ca8:	6803      	ldr	r3, [r0, #0]
{
 8000caa:	b082      	sub	sp, #8
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cac:	07dd      	lsls	r5, r3, #31
{
 8000cae:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cb0:	d530      	bpl.n	8000d14 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cb2:	49ab      	ldr	r1, [pc, #684]	; (8000f60 <HAL_RCC_OscConfig+0x2bc>)
 8000cb4:	684a      	ldr	r2, [r1, #4]
 8000cb6:	f002 020c 	and.w	r2, r2, #12
 8000cba:	2a04      	cmp	r2, #4
 8000cbc:	f000 80da 	beq.w	8000e74 <HAL_RCC_OscConfig+0x1d0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cc0:	684a      	ldr	r2, [r1, #4]
 8000cc2:	f002 020c 	and.w	r2, r2, #12
 8000cc6:	2a08      	cmp	r2, #8
 8000cc8:	f000 80d0 	beq.w	8000e6c <HAL_RCC_OscConfig+0x1c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ccc:	6863      	ldr	r3, [r4, #4]
 8000cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd2:	f000 810f 	beq.w	8000ef4 <HAL_RCC_OscConfig+0x250>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f000 8127 	beq.w	8000f2a <HAL_RCC_OscConfig+0x286>
 8000cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ce0:	f000 81b5 	beq.w	800104e <HAL_RCC_OscConfig+0x3aa>
 8000ce4:	4b9e      	ldr	r3, [pc, #632]	; (8000f60 <HAL_RCC_OscConfig+0x2bc>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000cf4:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf6:	f7ff fa69 	bl	80001cc <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cfa:	4d99      	ldr	r5, [pc, #612]	; (8000f60 <HAL_RCC_OscConfig+0x2bc>)
        tickstart = HAL_GetTick();
 8000cfc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cfe:	e005      	b.n	8000d0c <HAL_RCC_OscConfig+0x68>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d00:	f7ff fa64 	bl	80001cc <HAL_GetTick>
 8000d04:	1b80      	subs	r0, r0, r6
 8000d06:	2864      	cmp	r0, #100	; 0x64
 8000d08:	f200 810b 	bhi.w	8000f22 <HAL_RCC_OscConfig+0x27e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0c:	682b      	ldr	r3, [r5, #0]
 8000d0e:	039a      	lsls	r2, r3, #14
 8000d10:	d5f6      	bpl.n	8000d00 <HAL_RCC_OscConfig+0x5c>
 8000d12:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d14:	079f      	lsls	r7, r3, #30
 8000d16:	d528      	bpl.n	8000d6a <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d18:	4a91      	ldr	r2, [pc, #580]	; (8000f60 <HAL_RCC_OscConfig+0x2bc>)
 8000d1a:	6851      	ldr	r1, [r2, #4]
 8000d1c:	f011 0f0c 	tst.w	r1, #12
 8000d20:	f000 80b6 	beq.w	8000e90 <HAL_RCC_OscConfig+0x1ec>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d24:	6851      	ldr	r1, [r2, #4]
 8000d26:	f001 010c 	and.w	r1, r1, #12
 8000d2a:	2908      	cmp	r1, #8
 8000d2c:	f000 80ac 	beq.w	8000e88 <HAL_RCC_OscConfig+0x1e4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d30:	6923      	ldr	r3, [r4, #16]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 8141 	beq.w	8000fba <HAL_RCC_OscConfig+0x316>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4b8a      	ldr	r3, [pc, #552]	; (8000f64 <HAL_RCC_OscConfig+0x2c0>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d3c:	4d88      	ldr	r5, [pc, #544]	; (8000f60 <HAL_RCC_OscConfig+0x2bc>)
        __HAL_RCC_HSI_ENABLE();
 8000d3e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d40:	f7ff fa44 	bl	80001cc <HAL_GetTick>
 8000d44:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d46:	e005      	b.n	8000d54 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d48:	f7ff fa40 	bl	80001cc <HAL_GetTick>
 8000d4c:	1b80      	subs	r0, r0, r6
 8000d4e:	2802      	cmp	r0, #2
 8000d50:	f200 80e7 	bhi.w	8000f22 <HAL_RCC_OscConfig+0x27e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d54:	682b      	ldr	r3, [r5, #0]
 8000d56:	0798      	lsls	r0, r3, #30
 8000d58:	d5f6      	bpl.n	8000d48 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d5a:	682b      	ldr	r3, [r5, #0]
 8000d5c:	6962      	ldr	r2, [r4, #20]
 8000d5e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d62:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d66:	602b      	str	r3, [r5, #0]
 8000d68:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d6a:	071a      	lsls	r2, r3, #28
 8000d6c:	d522      	bpl.n	8000db4 <HAL_RCC_OscConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d6e:	69a3      	ldr	r3, [r4, #24]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f000 8098 	beq.w	8000ea6 <HAL_RCC_OscConfig+0x202>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d76:	2201      	movs	r2, #1
 8000d78:	4b7b      	ldr	r3, [pc, #492]	; (8000f68 <HAL_RCC_OscConfig+0x2c4>)

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d7a:	4d79      	ldr	r5, [pc, #484]	; (8000f60 <HAL_RCC_OscConfig+0x2bc>)
      __HAL_RCC_LSI_ENABLE();
 8000d7c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d7e:	f7ff fa25 	bl	80001cc <HAL_GetTick>
 8000d82:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d84:	e005      	b.n	8000d92 <HAL_RCC_OscConfig+0xee>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d86:	f7ff fa21 	bl	80001cc <HAL_GetTick>
 8000d8a:	1b80      	subs	r0, r0, r6
 8000d8c:	2802      	cmp	r0, #2
 8000d8e:	f200 80c8 	bhi.w	8000f22 <HAL_RCC_OscConfig+0x27e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000d94:	079b      	lsls	r3, r3, #30
 8000d96:	d5f6      	bpl.n	8000d86 <HAL_RCC_OscConfig+0xe2>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000d98:	4b74      	ldr	r3, [pc, #464]	; (8000f6c <HAL_RCC_OscConfig+0x2c8>)
 8000d9a:	4a75      	ldr	r2, [pc, #468]	; (8000f70 <HAL_RCC_OscConfig+0x2cc>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000da2:	0a5b      	lsrs	r3, r3, #9
 8000da4:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000da6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000da8:	9b01      	ldr	r3, [sp, #4]
 8000daa:	1e5a      	subs	r2, r3, #1
 8000dac:	9201      	str	r2, [sp, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d1f9      	bne.n	8000da6 <HAL_RCC_OscConfig+0x102>
 8000db2:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000db4:	075d      	lsls	r5, r3, #29
 8000db6:	d539      	bpl.n	8000e2c <HAL_RCC_OscConfig+0x188>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000db8:	4b69      	ldr	r3, [pc, #420]	; (8000f60 <HAL_RCC_OscConfig+0x2bc>)
 8000dba:	69da      	ldr	r2, [r3, #28]
 8000dbc:	00d0      	lsls	r0, r2, #3
 8000dbe:	f140 8082 	bpl.w	8000ec6 <HAL_RCC_OscConfig+0x222>
    FlagStatus       pwrclkchanged = RESET;
 8000dc2:	2500      	movs	r5, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc4:	4b6b      	ldr	r3, [pc, #428]	; (8000f74 <HAL_RCC_OscConfig+0x2d0>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	05d1      	lsls	r1, r2, #23
 8000dca:	f140 8099 	bpl.w	8000f00 <HAL_RCC_OscConfig+0x25c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dce:	68e3      	ldr	r3, [r4, #12]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d00f      	beq.n	8000df4 <HAL_RCC_OscConfig+0x150>
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f000 80d1 	beq.w	8000f7c <HAL_RCC_OscConfig+0x2d8>
 8000dda:	2b05      	cmp	r3, #5
 8000ddc:	4b60      	ldr	r3, [pc, #384]	; (8000f60 <HAL_RCC_OscConfig+0x2bc>)
 8000dde:	6a1a      	ldr	r2, [r3, #32]
 8000de0:	f000 80fc 	beq.w	8000fdc <HAL_RCC_OscConfig+0x338>
 8000de4:	f022 0201 	bic.w	r2, r2, #1
 8000de8:	621a      	str	r2, [r3, #32]
 8000dea:	6a1a      	ldr	r2, [r3, #32]
 8000dec:	f022 0204 	bic.w	r2, r2, #4
 8000df0:	621a      	str	r2, [r3, #32]
 8000df2:	e004      	b.n	8000dfe <HAL_RCC_OscConfig+0x15a>
 8000df4:	4a5a      	ldr	r2, [pc, #360]	; (8000f60 <HAL_RCC_OscConfig+0x2bc>)
 8000df6:	6a13      	ldr	r3, [r2, #32]
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8000dfe:	f7ff f9e5 	bl	80001cc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e02:	4e57      	ldr	r6, [pc, #348]	; (8000f60 <HAL_RCC_OscConfig+0x2bc>)
      tickstart = HAL_GetTick();
 8000e04:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e06:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e0a:	e006      	b.n	8000e1a <HAL_RCC_OscConfig+0x176>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e0c:	f7ff f9de 	bl	80001cc <HAL_GetTick>
 8000e10:	eba0 0008 	sub.w	r0, r0, r8
 8000e14:	42b8      	cmp	r0, r7
 8000e16:	f200 8084 	bhi.w	8000f22 <HAL_RCC_OscConfig+0x27e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e1a:	6a33      	ldr	r3, [r6, #32]
 8000e1c:	079b      	lsls	r3, r3, #30
 8000e1e:	d5f5      	bpl.n	8000e0c <HAL_RCC_OscConfig+0x168>
    if(pwrclkchanged == SET)
 8000e20:	b125      	cbz	r5, 8000e2c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e22:	4a4f      	ldr	r2, [pc, #316]	; (8000f60 <HAL_RCC_OscConfig+0x2bc>)
 8000e24:	69d3      	ldr	r3, [r2, #28]
 8000e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	61d3      	str	r3, [r2, #28]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e2c:	69e2      	ldr	r2, [r4, #28]
 8000e2e:	b1ca      	cbz	r2, 8000e64 <HAL_RCC_OscConfig+0x1c0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e30:	4d4b      	ldr	r5, [pc, #300]	; (8000f60 <HAL_RCC_OscConfig+0x2bc>)
 8000e32:	6869      	ldr	r1, [r5, #4]
 8000e34:	f001 010c 	and.w	r1, r1, #12
 8000e38:	2908      	cmp	r1, #8
 8000e3a:	d030      	beq.n	8000e9e <HAL_RCC_OscConfig+0x1fa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e3c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000e3e:	f04f 0100 	mov.w	r1, #0
 8000e42:	4a4d      	ldr	r2, [pc, #308]	; (8000f78 <HAL_RCC_OscConfig+0x2d4>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e44:	f000 80d2 	beq.w	8000fec <HAL_RCC_OscConfig+0x348>
        __HAL_RCC_PLL_DISABLE();
 8000e48:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8000e4a:	f7ff f9bf 	bl	80001cc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e4e:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8000e50:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e52:	e004      	b.n	8000e5e <HAL_RCC_OscConfig+0x1ba>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e54:	f7ff f9ba 	bl	80001cc <HAL_GetTick>
 8000e58:	1b40      	subs	r0, r0, r5
 8000e5a:	2802      	cmp	r0, #2
 8000e5c:	d861      	bhi.n	8000f22 <HAL_RCC_OscConfig+0x27e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e5e:	6823      	ldr	r3, [r4, #0]
 8000e60:	019b      	lsls	r3, r3, #6
 8000e62:	d4f7      	bmi.n	8000e54 <HAL_RCC_OscConfig+0x1b0>
  return HAL_OK;
 8000e64:	2000      	movs	r0, #0
}
 8000e66:	b002      	add	sp, #8
 8000e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e6c:	684a      	ldr	r2, [r1, #4]
 8000e6e:	03d0      	lsls	r0, r2, #15
 8000e70:	f57f af2c 	bpl.w	8000ccc <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e74:	4a3a      	ldr	r2, [pc, #232]	; (8000f60 <HAL_RCC_OscConfig+0x2bc>)
 8000e76:	6812      	ldr	r2, [r2, #0]
 8000e78:	0391      	lsls	r1, r2, #14
 8000e7a:	f57f af4b 	bpl.w	8000d14 <HAL_RCC_OscConfig+0x70>
 8000e7e:	6862      	ldr	r2, [r4, #4]
 8000e80:	2a00      	cmp	r2, #0
 8000e82:	f47f af47 	bne.w	8000d14 <HAL_RCC_OscConfig+0x70>
 8000e86:	e00a      	b.n	8000e9e <HAL_RCC_OscConfig+0x1fa>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e88:	6852      	ldr	r2, [r2, #4]
 8000e8a:	03d6      	lsls	r6, r2, #15
 8000e8c:	f53f af50 	bmi.w	8000d30 <HAL_RCC_OscConfig+0x8c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e90:	4a33      	ldr	r2, [pc, #204]	; (8000f60 <HAL_RCC_OscConfig+0x2bc>)
 8000e92:	6812      	ldr	r2, [r2, #0]
 8000e94:	0795      	lsls	r5, r2, #30
 8000e96:	d521      	bpl.n	8000edc <HAL_RCC_OscConfig+0x238>
 8000e98:	6922      	ldr	r2, [r4, #16]
 8000e9a:	2a01      	cmp	r2, #1
 8000e9c:	d01e      	beq.n	8000edc <HAL_RCC_OscConfig+0x238>
        return HAL_ERROR;
 8000e9e:	2001      	movs	r0, #1
}
 8000ea0:	b002      	add	sp, #8
 8000ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8000ea6:	4a30      	ldr	r2, [pc, #192]	; (8000f68 <HAL_RCC_OscConfig+0x2c4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ea8:	4d2d      	ldr	r5, [pc, #180]	; (8000f60 <HAL_RCC_OscConfig+0x2bc>)
      __HAL_RCC_LSI_DISABLE();
 8000eaa:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000eac:	f7ff f98e 	bl	80001cc <HAL_GetTick>
 8000eb0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb2:	e004      	b.n	8000ebe <HAL_RCC_OscConfig+0x21a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eb4:	f7ff f98a 	bl	80001cc <HAL_GetTick>
 8000eb8:	1b80      	subs	r0, r0, r6
 8000eba:	2802      	cmp	r0, #2
 8000ebc:	d831      	bhi.n	8000f22 <HAL_RCC_OscConfig+0x27e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ebe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000ec0:	079f      	lsls	r7, r3, #30
 8000ec2:	d4f7      	bmi.n	8000eb4 <HAL_RCC_OscConfig+0x210>
 8000ec4:	e775      	b.n	8000db2 <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8000ec8:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ece:	61da      	str	r2, [r3, #28]
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	9b00      	ldr	r3, [sp, #0]
 8000eda:	e773      	b.n	8000dc4 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000edc:	4920      	ldr	r1, [pc, #128]	; (8000f60 <HAL_RCC_OscConfig+0x2bc>)
 8000ede:	6960      	ldr	r0, [r4, #20]
 8000ee0:	680a      	ldr	r2, [r1, #0]
 8000ee2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000ee6:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8000eea:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eec:	071a      	lsls	r2, r3, #28
 8000eee:	f57f af61 	bpl.w	8000db4 <HAL_RCC_OscConfig+0x110>
 8000ef2:	e73c      	b.n	8000d6e <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef4:	4a1a      	ldr	r2, [pc, #104]	; (8000f60 <HAL_RCC_OscConfig+0x2bc>)
 8000ef6:	6813      	ldr	r3, [r2, #0]
 8000ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	e6fa      	b.n	8000cf6 <HAL_RCC_OscConfig+0x52>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f00:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f02:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f08:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f0a:	f7ff f95f 	bl	80001cc <HAL_GetTick>
 8000f0e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f10:	6833      	ldr	r3, [r6, #0]
 8000f12:	05da      	lsls	r2, r3, #23
 8000f14:	f53f af5b 	bmi.w	8000dce <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f18:	f7ff f958 	bl	80001cc <HAL_GetTick>
 8000f1c:	1bc0      	subs	r0, r0, r7
 8000f1e:	2864      	cmp	r0, #100	; 0x64
 8000f20:	d9f6      	bls.n	8000f10 <HAL_RCC_OscConfig+0x26c>
            return HAL_TIMEOUT;
 8000f22:	2003      	movs	r0, #3
}
 8000f24:	b002      	add	sp, #8
 8000f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f2e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000f32:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f34:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f42:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f44:	f7ff f942 	bl	80001cc <HAL_GetTick>
 8000f48:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f4a:	e004      	b.n	8000f56 <HAL_RCC_OscConfig+0x2b2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f4c:	f7ff f93e 	bl	80001cc <HAL_GetTick>
 8000f50:	1b80      	subs	r0, r0, r6
 8000f52:	2864      	cmp	r0, #100	; 0x64
 8000f54:	d8e5      	bhi.n	8000f22 <HAL_RCC_OscConfig+0x27e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f56:	682b      	ldr	r3, [r5, #0]
 8000f58:	039b      	lsls	r3, r3, #14
 8000f5a:	d4f7      	bmi.n	8000f4c <HAL_RCC_OscConfig+0x2a8>
 8000f5c:	e6d9      	b.n	8000d12 <HAL_RCC_OscConfig+0x6e>
 8000f5e:	bf00      	nop
 8000f60:	40021000 	.word	0x40021000
 8000f64:	42420000 	.word	0x42420000
 8000f68:	42420480 	.word	0x42420480
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	10624dd3 	.word	0x10624dd3
 8000f74:	40007000 	.word	0x40007000
 8000f78:	42420060 	.word	0x42420060
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f80:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000f84:	6a1a      	ldr	r2, [r3, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f86:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f88:	f022 0201 	bic.w	r2, r2, #1
 8000f8c:	621a      	str	r2, [r3, #32]
 8000f8e:	6a1a      	ldr	r2, [r3, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f90:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f94:	f022 0204 	bic.w	r2, r2, #4
 8000f98:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 8000f9a:	f7ff f917 	bl	80001cc <HAL_GetTick>
 8000f9e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fa0:	e004      	b.n	8000fac <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fa2:	f7ff f913 	bl	80001cc <HAL_GetTick>
 8000fa6:	1bc0      	subs	r0, r0, r7
 8000fa8:	4540      	cmp	r0, r8
 8000faa:	d8ba      	bhi.n	8000f22 <HAL_RCC_OscConfig+0x27e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fac:	6a33      	ldr	r3, [r6, #32]
 8000fae:	0798      	lsls	r0, r3, #30
 8000fb0:	d4f7      	bmi.n	8000fa2 <HAL_RCC_OscConfig+0x2fe>
    if(pwrclkchanged == SET)
 8000fb2:	2d00      	cmp	r5, #0
 8000fb4:	f43f af3a 	beq.w	8000e2c <HAL_RCC_OscConfig+0x188>
 8000fb8:	e733      	b.n	8000e22 <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_DISABLE();
 8000fba:	4a2b      	ldr	r2, [pc, #172]	; (8001068 <HAL_RCC_OscConfig+0x3c4>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fbc:	4d2b      	ldr	r5, [pc, #172]	; (800106c <HAL_RCC_OscConfig+0x3c8>)
        __HAL_RCC_HSI_DISABLE();
 8000fbe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000fc0:	f7ff f904 	bl	80001cc <HAL_GetTick>
 8000fc4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fc6:	e004      	b.n	8000fd2 <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fc8:	f7ff f900 	bl	80001cc <HAL_GetTick>
 8000fcc:	1b80      	subs	r0, r0, r6
 8000fce:	2802      	cmp	r0, #2
 8000fd0:	d8a7      	bhi.n	8000f22 <HAL_RCC_OscConfig+0x27e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fd2:	682b      	ldr	r3, [r5, #0]
 8000fd4:	0799      	lsls	r1, r3, #30
 8000fd6:	d4f7      	bmi.n	8000fc8 <HAL_RCC_OscConfig+0x324>
 8000fd8:	6823      	ldr	r3, [r4, #0]
 8000fda:	e6c6      	b.n	8000d6a <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fdc:	f042 0204 	orr.w	r2, r2, #4
 8000fe0:	621a      	str	r2, [r3, #32]
 8000fe2:	6a1a      	ldr	r2, [r3, #32]
 8000fe4:	f042 0201 	orr.w	r2, r2, #1
 8000fe8:	621a      	str	r2, [r3, #32]
 8000fea:	e708      	b.n	8000dfe <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_PLL_DISABLE();
 8000fec:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8000fee:	f7ff f8ed 	bl	80001cc <HAL_GetTick>
 8000ff2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff4:	e004      	b.n	8001000 <HAL_RCC_OscConfig+0x35c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ff6:	f7ff f8e9 	bl	80001cc <HAL_GetTick>
 8000ffa:	1b80      	subs	r0, r0, r6
 8000ffc:	2802      	cmp	r0, #2
 8000ffe:	d890      	bhi.n	8000f22 <HAL_RCC_OscConfig+0x27e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001000:	682b      	ldr	r3, [r5, #0]
 8001002:	0199      	lsls	r1, r3, #6
 8001004:	d4f7      	bmi.n	8000ff6 <HAL_RCC_OscConfig+0x352>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001006:	6a22      	ldr	r2, [r4, #32]
 8001008:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800100c:	d105      	bne.n	800101a <HAL_RCC_OscConfig+0x376>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800100e:	686b      	ldr	r3, [r5, #4]
 8001010:	68a1      	ldr	r1, [r4, #8]
 8001012:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001016:	430b      	orrs	r3, r1
 8001018:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800101a:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <HAL_RCC_OscConfig+0x3c8>)
 800101e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001020:	6859      	ldr	r1, [r3, #4]
 8001022:	4302      	orrs	r2, r0
 8001024:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8001028:	4811      	ldr	r0, [pc, #68]	; (8001070 <HAL_RCC_OscConfig+0x3cc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800102a:	430a      	orrs	r2, r1
 800102c:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 800102e:	6005      	str	r5, [r0, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001030:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 8001032:	f7ff f8cb 	bl	80001cc <HAL_GetTick>
 8001036:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001038:	e005      	b.n	8001046 <HAL_RCC_OscConfig+0x3a2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800103a:	f7ff f8c7 	bl	80001cc <HAL_GetTick>
 800103e:	1b40      	subs	r0, r0, r5
 8001040:	2802      	cmp	r0, #2
 8001042:	f63f af6e 	bhi.w	8000f22 <HAL_RCC_OscConfig+0x27e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001046:	6823      	ldr	r3, [r4, #0]
 8001048:	019a      	lsls	r2, r3, #6
 800104a:	d5f6      	bpl.n	800103a <HAL_RCC_OscConfig+0x396>
 800104c:	e70a      	b.n	8000e64 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800104e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001052:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	e646      	b.n	8000cf6 <HAL_RCC_OscConfig+0x52>
 8001068:	42420000 	.word	0x42420000
 800106c:	40021000 	.word	0x40021000
 8001070:	42420060 	.word	0x42420060

08001074 <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001074:	f240 2201 	movw	r2, #513	; 0x201
{
 8001078:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <HAL_RCC_GetSysClockFreq+0x5c>)
 800107c:	f10d 0c18 	add.w	ip, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001080:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001084:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001086:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 800108a:	4912      	ldr	r1, [pc, #72]	; (80010d4 <HAL_RCC_GetSysClockFreq+0x60>)
 800108c:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800108e:	f003 020c 	and.w	r2, r3, #12
 8001092:	2a08      	cmp	r2, #8
 8001094:	d002      	beq.n	800109c <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8001096:	4810      	ldr	r0, [pc, #64]	; (80010d8 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001098:	b006      	add	sp, #24
 800109a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800109c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80010a0:	4462      	add	r2, ip
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010a2:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010a4:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010a8:	d404      	bmi.n	80010b4 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80010aa:	480c      	ldr	r0, [pc, #48]	; (80010dc <HAL_RCC_GetSysClockFreq+0x68>)
 80010ac:	fb00 f002 	mul.w	r0, r0, r2
}
 80010b0:	b006      	add	sp, #24
 80010b2:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010b4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010b6:	4808      	ldr	r0, [pc, #32]	; (80010d8 <HAL_RCC_GetSysClockFreq+0x64>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010b8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010bc:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010c0:	4463      	add	r3, ip
 80010c2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010c6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80010ca:	b006      	add	sp, #24
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	08002b38 	.word	0x08002b38
 80010d4:	40021000 	.word	0x40021000
 80010d8:	007a1200 	.word	0x007a1200
 80010dc:	003d0900 	.word	0x003d0900

080010e0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010e0:	4a54      	ldr	r2, [pc, #336]	; (8001234 <HAL_RCC_ClockConfig+0x154>)
 80010e2:	6813      	ldr	r3, [r2, #0]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	428b      	cmp	r3, r1
 80010ea:	d20b      	bcs.n	8001104 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ec:	6813      	ldr	r3, [r2, #0]
 80010ee:	f023 0307 	bic.w	r3, r3, #7
 80010f2:	430b      	orrs	r3, r1
 80010f4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010f6:	6813      	ldr	r3, [r2, #0]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	428b      	cmp	r3, r1
 80010fe:	d001      	beq.n	8001104 <HAL_RCC_ClockConfig+0x24>
      return HAL_ERROR;
 8001100:	2001      	movs	r0, #1
}
 8001102:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001104:	6803      	ldr	r3, [r0, #0]
{
 8001106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800110a:	079d      	lsls	r5, r3, #30
 800110c:	d514      	bpl.n	8001138 <HAL_RCC_ClockConfig+0x58>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800110e:	075c      	lsls	r4, r3, #29
 8001110:	d504      	bpl.n	800111c <HAL_RCC_ClockConfig+0x3c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001112:	4c49      	ldr	r4, [pc, #292]	; (8001238 <HAL_RCC_ClockConfig+0x158>)
 8001114:	6862      	ldr	r2, [r4, #4]
 8001116:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800111a:	6062      	str	r2, [r4, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800111c:	071a      	lsls	r2, r3, #28
 800111e:	d504      	bpl.n	800112a <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001120:	4c45      	ldr	r4, [pc, #276]	; (8001238 <HAL_RCC_ClockConfig+0x158>)
 8001122:	6862      	ldr	r2, [r4, #4]
 8001124:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8001128:	6062      	str	r2, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800112a:	4c43      	ldr	r4, [pc, #268]	; (8001238 <HAL_RCC_ClockConfig+0x158>)
 800112c:	6885      	ldr	r5, [r0, #8]
 800112e:	6862      	ldr	r2, [r4, #4]
 8001130:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001134:	432a      	orrs	r2, r5
 8001136:	6062      	str	r2, [r4, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001138:	07df      	lsls	r7, r3, #31
 800113a:	4604      	mov	r4, r0
 800113c:	460e      	mov	r6, r1
 800113e:	d522      	bpl.n	8001186 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001140:	6842      	ldr	r2, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001142:	4b3d      	ldr	r3, [pc, #244]	; (8001238 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001144:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001146:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001148:	d06f      	beq.n	800122a <HAL_RCC_ClockConfig+0x14a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800114a:	2a02      	cmp	r2, #2
 800114c:	d06a      	beq.n	8001224 <HAL_RCC_ClockConfig+0x144>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114e:	0799      	lsls	r1, r3, #30
 8001150:	d529      	bpl.n	80011a6 <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001152:	4d39      	ldr	r5, [pc, #228]	; (8001238 <HAL_RCC_ClockConfig+0x158>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001154:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001158:	686b      	ldr	r3, [r5, #4]
 800115a:	f023 0303 	bic.w	r3, r3, #3
 800115e:	4313      	orrs	r3, r2
 8001160:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001162:	f7ff f833 	bl	80001cc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001166:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001168:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800116a:	2b01      	cmp	r3, #1
 800116c:	d049      	beq.n	8001202 <HAL_RCC_ClockConfig+0x122>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800116e:	2b02      	cmp	r3, #2
 8001170:	d105      	bne.n	800117e <HAL_RCC_ClockConfig+0x9e>
 8001172:	e051      	b.n	8001218 <HAL_RCC_ClockConfig+0x138>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001174:	f7ff f82a 	bl	80001cc <HAL_GetTick>
 8001178:	1bc0      	subs	r0, r0, r7
 800117a:	4540      	cmp	r0, r8
 800117c:	d858      	bhi.n	8001230 <HAL_RCC_ClockConfig+0x150>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800117e:	686b      	ldr	r3, [r5, #4]
 8001180:	f013 0f0c 	tst.w	r3, #12
 8001184:	d1f6      	bne.n	8001174 <HAL_RCC_ClockConfig+0x94>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001186:	4a2b      	ldr	r2, [pc, #172]	; (8001234 <HAL_RCC_ClockConfig+0x154>)
 8001188:	6813      	ldr	r3, [r2, #0]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	42b3      	cmp	r3, r6
 8001190:	d90c      	bls.n	80011ac <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001192:	6813      	ldr	r3, [r2, #0]
 8001194:	f023 0307 	bic.w	r3, r3, #7
 8001198:	4333      	orrs	r3, r6
 800119a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800119c:	6813      	ldr	r3, [r2, #0]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	42b3      	cmp	r3, r6
 80011a4:	d002      	beq.n	80011ac <HAL_RCC_ClockConfig+0xcc>
      return HAL_ERROR;
 80011a6:	2001      	movs	r0, #1
}
 80011a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011ac:	6823      	ldr	r3, [r4, #0]
 80011ae:	075a      	lsls	r2, r3, #29
 80011b0:	d506      	bpl.n	80011c0 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011b2:	4921      	ldr	r1, [pc, #132]	; (8001238 <HAL_RCC_ClockConfig+0x158>)
 80011b4:	68e0      	ldr	r0, [r4, #12]
 80011b6:	684a      	ldr	r2, [r1, #4]
 80011b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80011bc:	4302      	orrs	r2, r0
 80011be:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c0:	071b      	lsls	r3, r3, #28
 80011c2:	d507      	bpl.n	80011d4 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011c4:	4a1c      	ldr	r2, [pc, #112]	; (8001238 <HAL_RCC_ClockConfig+0x158>)
 80011c6:	6921      	ldr	r1, [r4, #16]
 80011c8:	6853      	ldr	r3, [r2, #4]
 80011ca:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80011ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80011d2:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011d4:	f7ff ff4e 	bl	8001074 <HAL_RCC_GetSysClockFreq>
 80011d8:	4b17      	ldr	r3, [pc, #92]	; (8001238 <HAL_RCC_ClockConfig+0x158>)
 80011da:	4918      	ldr	r1, [pc, #96]	; (800123c <HAL_RCC_ClockConfig+0x15c>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	4a18      	ldr	r2, [pc, #96]	; (8001240 <HAL_RCC_ClockConfig+0x160>)
 80011e0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80011e4:	5ccb      	ldrb	r3, [r1, r3]
 80011e6:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 80011ea:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011ec:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80011ee:	f7fe ffad 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 80011f2:	2000      	movs	r0, #0
}
 80011f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011f8:	f7fe ffe8 	bl	80001cc <HAL_GetTick>
 80011fc:	1bc0      	subs	r0, r0, r7
 80011fe:	4540      	cmp	r0, r8
 8001200:	d816      	bhi.n	8001230 <HAL_RCC_ClockConfig+0x150>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001202:	686b      	ldr	r3, [r5, #4]
 8001204:	f003 030c 	and.w	r3, r3, #12
 8001208:	2b04      	cmp	r3, #4
 800120a:	d1f5      	bne.n	80011f8 <HAL_RCC_ClockConfig+0x118>
 800120c:	e7bb      	b.n	8001186 <HAL_RCC_ClockConfig+0xa6>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800120e:	f7fe ffdd 	bl	80001cc <HAL_GetTick>
 8001212:	1bc0      	subs	r0, r0, r7
 8001214:	4540      	cmp	r0, r8
 8001216:	d80b      	bhi.n	8001230 <HAL_RCC_ClockConfig+0x150>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001218:	686b      	ldr	r3, [r5, #4]
 800121a:	f003 030c 	and.w	r3, r3, #12
 800121e:	2b08      	cmp	r3, #8
 8001220:	d1f5      	bne.n	800120e <HAL_RCC_ClockConfig+0x12e>
 8001222:	e7b0      	b.n	8001186 <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001224:	0198      	lsls	r0, r3, #6
 8001226:	d494      	bmi.n	8001152 <HAL_RCC_ClockConfig+0x72>
 8001228:	e7bd      	b.n	80011a6 <HAL_RCC_ClockConfig+0xc6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122a:	039d      	lsls	r5, r3, #14
 800122c:	d491      	bmi.n	8001152 <HAL_RCC_ClockConfig+0x72>
 800122e:	e7ba      	b.n	80011a6 <HAL_RCC_ClockConfig+0xc6>
          return HAL_TIMEOUT;
 8001230:	2003      	movs	r0, #3
 8001232:	e7b9      	b.n	80011a8 <HAL_RCC_ClockConfig+0xc8>
 8001234:	40022000 	.word	0x40022000
 8001238:	40021000 	.word	0x40021000
 800123c:	08002b58 	.word	0x08002b58
 8001240:	20000008 	.word	0x20000008

08001244 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001248:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800124a:	6800      	ldr	r0, [r0, #0]
{
 800124c:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800124e:	07c5      	lsls	r5, r0, #31
 8001250:	d52a      	bpl.n	80012a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001252:	4b3a      	ldr	r3, [pc, #232]	; (800133c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001254:	69da      	ldr	r2, [r3, #28]
 8001256:	00d1      	lsls	r1, r2, #3
 8001258:	d53d      	bpl.n	80012d6 <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125a:	4b39      	ldr	r3, [pc, #228]	; (8001340 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus       pwrclkchanged = RESET;
 800125c:	2500      	movs	r5, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	05d2      	lsls	r2, r2, #23
 8001262:	d546      	bpl.n	80012f2 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001264:	4935      	ldr	r1, [pc, #212]	; (800133c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001266:	6860      	ldr	r0, [r4, #4]
 8001268:	6a0a      	ldr	r2, [r1, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800126a:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800126e:	d00f      	beq.n	8001290 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8001270:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8001274:	4293      	cmp	r3, r2
 8001276:	d00b      	beq.n	8001290 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001278:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800127a:	2600      	movs	r6, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800127c:	6a0b      	ldr	r3, [r1, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800127e:	4a31      	ldr	r2, [pc, #196]	; (8001344 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001280:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001284:	6017      	str	r7, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001286:	6016      	str	r6, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001288:	6208      	str	r0, [r1, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800128a:	07d8      	lsls	r0, r3, #31
 800128c:	d445      	bmi.n	800131a <HAL_RCCEx_PeriphCLKConfig+0xd6>
 800128e:	6860      	ldr	r0, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001290:	4a2a      	ldr	r2, [pc, #168]	; (800133c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001292:	6a13      	ldr	r3, [r2, #32]
 8001294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001298:	4303      	orrs	r3, r0
 800129a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800129c:	b11d      	cbz	r5, 80012a6 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800129e:	69d3      	ldr	r3, [r2, #28]
 80012a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012a4:	61d3      	str	r3, [r2, #28]
 80012a6:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80012a8:	0783      	lsls	r3, r0, #30
 80012aa:	d506      	bpl.n	80012ba <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80012ac:	4a23      	ldr	r2, [pc, #140]	; (800133c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80012ae:	68a1      	ldr	r1, [r4, #8]
 80012b0:	6853      	ldr	r3, [r2, #4]
 80012b2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012b6:	430b      	orrs	r3, r1
 80012b8:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80012ba:	f010 0010 	ands.w	r0, r0, #16
 80012be:	d007      	beq.n	80012d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80012c0:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80012c2:	4a1e      	ldr	r2, [pc, #120]	; (800133c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80012c4:	68e1      	ldr	r1, [r4, #12]
 80012c6:	6853      	ldr	r3, [r2, #4]
 80012c8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80012cc:	430b      	orrs	r3, r1
 80012ce:	6053      	str	r3, [r2, #4]
}
 80012d0:	b002      	add	sp, #8
 80012d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 80012d8:	2501      	movs	r5, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012de:	61da      	str	r2, [r3, #28]
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	05d2      	lsls	r2, r2, #23
 80012f0:	d4b8      	bmi.n	8001264 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f2:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f4:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012fa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012fc:	f7fe ff66 	bl	80001cc <HAL_GetTick>
 8001300:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001302:	6833      	ldr	r3, [r6, #0]
 8001304:	05db      	lsls	r3, r3, #23
 8001306:	d4ad      	bmi.n	8001264 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001308:	f7fe ff60 	bl	80001cc <HAL_GetTick>
 800130c:	1bc0      	subs	r0, r0, r7
 800130e:	2864      	cmp	r0, #100	; 0x64
 8001310:	d9f7      	bls.n	8001302 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8001312:	2003      	movs	r0, #3
}
 8001314:	b002      	add	sp, #8
 8001316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800131a:	460e      	mov	r6, r1
        tickstart = HAL_GetTick();
 800131c:	f7fe ff56 	bl	80001cc <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001320:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001324:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001326:	6a33      	ldr	r3, [r6, #32]
 8001328:	079a      	lsls	r2, r3, #30
 800132a:	d4b0      	bmi.n	800128e <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800132c:	f7fe ff4e 	bl	80001cc <HAL_GetTick>
 8001330:	eba0 0008 	sub.w	r0, r0, r8
 8001334:	42b8      	cmp	r0, r7
 8001336:	d9f6      	bls.n	8001326 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001338:	e7eb      	b.n	8001312 <HAL_RCCEx_PeriphCLKConfig+0xce>
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000
 8001340:	40007000 	.word	0x40007000
 8001344:	42420440 	.word	0x42420440

08001348 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800134c:	4680      	mov	r8, r0
 800134e:	460f      	mov	r7, r1
 8001350:	4616      	mov	r6, r2
 8001352:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001354:	f8d8 4000 	ldr.w	r4, [r8]
 8001358:	e001      	b.n	800135e <SPI_WaitFlagStateUntilTimeout+0x16>
  {
    if(Timeout != HAL_MAX_DELAY)
 800135a:	1c6b      	adds	r3, r5, #1
 800135c:	d10a      	bne.n	8001374 <SPI_WaitFlagStateUntilTimeout+0x2c>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800135e:	68a0      	ldr	r0, [r4, #8]
 8001360:	ea37 0300 	bics.w	r3, r7, r0
 8001364:	bf0c      	ite	eq
 8001366:	2001      	moveq	r0, #1
 8001368:	2000      	movne	r0, #0
 800136a:	4286      	cmp	r6, r0
 800136c:	d1f5      	bne.n	800135a <SPI_WaitFlagStateUntilTimeout+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800136e:	2000      	movs	r0, #0
}
 8001370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001374:	b13d      	cbz	r5, 8001386 <SPI_WaitFlagStateUntilTimeout+0x3e>
 8001376:	f7fe ff29 	bl	80001cc <HAL_GetTick>
 800137a:	9b06      	ldr	r3, [sp, #24]
 800137c:	1ac0      	subs	r0, r0, r3
 800137e:	42a8      	cmp	r0, r5
 8001380:	d3e8      	bcc.n	8001354 <SPI_WaitFlagStateUntilTimeout+0xc>
 8001382:	f8d8 4000 	ldr.w	r4, [r8]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001386:	6863      	ldr	r3, [r4, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001388:	f8d8 2004 	ldr.w	r2, [r8, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800138c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001390:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001394:	6063      	str	r3, [r4, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001396:	d015      	beq.n	80013c4 <SPI_WaitFlagStateUntilTimeout+0x7c>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001398:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800139c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013a0:	d108      	bne.n	80013b4 <SPI_WaitFlagStateUntilTimeout+0x6c>
          SPI_RESET_CRC(hspi);
 80013a2:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 80013a6:	6823      	ldr	r3, [r4, #0]
 80013a8:	4013      	ands	r3, r2
 80013aa:	6023      	str	r3, [r4, #0]
 80013ac:	6823      	ldr	r3, [r4, #0]
 80013ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013b2:	6023      	str	r3, [r4, #0]
        hspi->State= HAL_SPI_STATE_READY;
 80013b4:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 80013b6:	2300      	movs	r3, #0
        hspi->State= HAL_SPI_STATE_READY;
 80013b8:	f888 2051 	strb.w	r2, [r8, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80013bc:	f888 3050 	strb.w	r3, [r8, #80]	; 0x50
 80013c0:	2003      	movs	r0, #3
 80013c2:	e7d5      	b.n	8001370 <SPI_WaitFlagStateUntilTimeout+0x28>
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80013c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80013c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013cc:	d002      	beq.n	80013d4 <SPI_WaitFlagStateUntilTimeout+0x8c>
 80013ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d2:	d1e1      	bne.n	8001398 <SPI_WaitFlagStateUntilTimeout+0x50>
          __HAL_SPI_DISABLE(hspi);
 80013d4:	6823      	ldr	r3, [r4, #0]
 80013d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013da:	6023      	str	r3, [r4, #0]
 80013dc:	e7dc      	b.n	8001398 <SPI_WaitFlagStateUntilTimeout+0x50>
 80013de:	bf00      	nop

080013e0 <HAL_SPI_TransmitReceive.part.1>:
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 80013e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013e4:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80013e6:	2001      	movs	r0, #1
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 80013e8:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 80013ea:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 80013ee:	4616      	mov	r6, r2
 80013f0:	4699      	mov	r9, r3
 80013f2:	460f      	mov	r7, r1
 80013f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 80013f6:	f7fe fee9 	bl	80001cc <HAL_GetTick>
  tmp  = hspi->State;
 80013fa:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 80013fe:	4680      	mov	r8, r0
  tmp  = hspi->State;
 8001400:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001402:	2b01      	cmp	r3, #1
  tmp1 = hspi->Init.Mode;
 8001404:	6862      	ldr	r2, [r4, #4]
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001406:	d011      	beq.n	800142c <HAL_SPI_TransmitReceive.part.1+0x4c>
 8001408:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800140c:	d009      	beq.n	8001422 <HAL_SPI_TransmitReceive.part.1+0x42>
    errorcode = HAL_BUSY;
 800140e:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001410:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8001412:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8001414:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001418:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800141c:	b005      	add	sp, #20
 800141e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001422:	68a1      	ldr	r1, [r4, #8]
 8001424:	2900      	cmp	r1, #0
 8001426:	d1f2      	bne.n	800140e <HAL_SPI_TransmitReceive.part.1+0x2e>
 8001428:	2b04      	cmp	r3, #4
 800142a:	d1f0      	bne.n	800140e <HAL_SPI_TransmitReceive.part.1+0x2e>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800142c:	2f00      	cmp	r7, #0
 800142e:	d060      	beq.n	80014f2 <HAL_SPI_TransmitReceive.part.1+0x112>
 8001430:	2e00      	cmp	r6, #0
 8001432:	d05e      	beq.n	80014f2 <HAL_SPI_TransmitReceive.part.1+0x112>
 8001434:	f1b9 0f00 	cmp.w	r9, #0
 8001438:	d05b      	beq.n	80014f2 <HAL_SPI_TransmitReceive.part.1+0x112>
  if(hspi->State == HAL_SPI_STATE_READY)
 800143a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800143e:	6821      	ldr	r1, [r4, #0]
  if(hspi->State == HAL_SPI_STATE_READY)
 8001440:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001442:	bf04      	itt	eq
 8001444:	2305      	moveq	r3, #5
 8001446:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800144a:	2300      	movs	r3, #0
 800144c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 800144e:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001452:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001456:	6808      	ldr	r0, [r1, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001458:	63a6      	str	r6, [r4, #56]	; 0x38
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800145a:	0640      	lsls	r0, r0, #25
  hspi->RxXferSize  = Size;
 800145c:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001460:	6327      	str	r7, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001462:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxISR       = NULL;
 8001466:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800146a:	d544      	bpl.n	80014f6 <HAL_SPI_TransmitReceive.part.1+0x116>
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800146c:	68e3      	ldr	r3, [r4, #12]
 800146e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001472:	d045      	beq.n	8001500 <HAL_SPI_TransmitReceive.part.1+0x120>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001474:	2a00      	cmp	r2, #0
 8001476:	d171      	bne.n	800155c <HAL_SPI_TransmitReceive.part.1+0x17c>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8001478:	f817 3b01 	ldrb.w	r3, [r7], #1
 800147c:	730b      	strb	r3, [r1, #12]
      hspi->TxXferCount--;
 800147e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001480:	3b01      	subs	r3, #1
 8001482:	b29b      	uxth	r3, r3
 8001484:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001486:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800148a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800148c:	b29b      	uxth	r3, r3
 800148e:	b91b      	cbnz	r3, 8001498 <HAL_SPI_TransmitReceive.part.1+0xb8>
 8001490:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001492:	b29b      	uxth	r3, r3
 8001494:	2b00      	cmp	r3, #0
 8001496:	d041      	beq.n	800151c <HAL_SPI_TransmitReceive.part.1+0x13c>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001498:	f1b9 0f00 	cmp.w	r9, #0
 800149c:	d00f      	beq.n	80014be <HAL_SPI_TransmitReceive.part.1+0xde>
 800149e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	b163      	cbz	r3, 80014be <HAL_SPI_TransmitReceive.part.1+0xde>
 80014a4:	6823      	ldr	r3, [r4, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	0791      	lsls	r1, r2, #30
 80014aa:	d508      	bpl.n	80014be <HAL_SPI_TransmitReceive.part.1+0xde>
        txallowed = 0U;
 80014ac:	f04f 0900 	mov.w	r9, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80014b0:	783a      	ldrb	r2, [r7, #0]
 80014b2:	3701      	adds	r7, #1
 80014b4:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80014b6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80014b8:	3b01      	subs	r3, #1
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80014be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	b163      	cbz	r3, 80014de <HAL_SPI_TransmitReceive.part.1+0xfe>
 80014c4:	6823      	ldr	r3, [r4, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	07d2      	lsls	r2, r2, #31
 80014ca:	d508      	bpl.n	80014de <HAL_SPI_TransmitReceive.part.1+0xfe>
        txallowed = 1U;
 80014cc:	f04f 0901 	mov.w	r9, #1
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 80014d4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80014d6:	444e      	add	r6, r9
        hspi->RxXferCount--;
 80014d8:	3b01      	subs	r3, #1
 80014da:	b29b      	uxth	r3, r3
 80014dc:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80014de:	1c6b      	adds	r3, r5, #1
 80014e0:	d0d3      	beq.n	800148a <HAL_SPI_TransmitReceive.part.1+0xaa>
 80014e2:	f7fe fe73 	bl	80001cc <HAL_GetTick>
 80014e6:	eba0 0008 	sub.w	r0, r0, r8
 80014ea:	4285      	cmp	r5, r0
 80014ec:	d8cd      	bhi.n	800148a <HAL_SPI_TransmitReceive.part.1+0xaa>
        errorcode = HAL_TIMEOUT;
 80014ee:	2003      	movs	r0, #3
 80014f0:	e78e      	b.n	8001410 <HAL_SPI_TransmitReceive.part.1+0x30>
    errorcode = HAL_ERROR;
 80014f2:	2001      	movs	r0, #1
 80014f4:	e78c      	b.n	8001410 <HAL_SPI_TransmitReceive.part.1+0x30>
    __HAL_SPI_ENABLE(hspi);
 80014f6:	680b      	ldr	r3, [r1, #0]
 80014f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014fc:	600b      	str	r3, [r1, #0]
 80014fe:	e7b5      	b.n	800146c <HAL_SPI_TransmitReceive.part.1+0x8c>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001500:	2a00      	cmp	r2, #0
 8001502:	d05c      	beq.n	80015be <HAL_SPI_TransmitReceive.part.1+0x1de>
 8001504:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001506:	b29b      	uxth	r3, r3
 8001508:	2b01      	cmp	r3, #1
 800150a:	d058      	beq.n	80015be <HAL_SPI_TransmitReceive.part.1+0x1de>
        txallowed = 1U;
 800150c:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001510:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001512:	b29b      	uxth	r3, r3
 8001514:	bb3b      	cbnz	r3, 8001566 <HAL_SPI_TransmitReceive.part.1+0x186>
 8001516:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001518:	b29b      	uxth	r3, r3
 800151a:	bb23      	cbnz	r3, 8001566 <HAL_SPI_TransmitReceive.part.1+0x186>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800151c:	f8cd 8000 	str.w	r8, [sp]
 8001520:	462b      	mov	r3, r5
 8001522:	2201      	movs	r2, #1
 8001524:	2102      	movs	r1, #2
 8001526:	4620      	mov	r0, r4
 8001528:	f7ff ff0e 	bl	8001348 <SPI_WaitFlagStateUntilTimeout>
 800152c:	2800      	cmp	r0, #0
 800152e:	d1de      	bne.n	80014ee <HAL_SPI_TransmitReceive.part.1+0x10e>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001530:	4602      	mov	r2, r0
 8001532:	f8cd 8000 	str.w	r8, [sp]
 8001536:	462b      	mov	r3, r5
 8001538:	2180      	movs	r1, #128	; 0x80
 800153a:	4620      	mov	r0, r4
 800153c:	f7ff ff04 	bl	8001348 <SPI_WaitFlagStateUntilTimeout>
 8001540:	2800      	cmp	r0, #0
 8001542:	d144      	bne.n	80015ce <HAL_SPI_TransmitReceive.part.1+0x1ee>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001544:	68a3      	ldr	r3, [r4, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	f47f af62 	bne.w	8001410 <HAL_SPI_TransmitReceive.part.1+0x30>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800154c:	6823      	ldr	r3, [r4, #0]
 800154e:	9003      	str	r0, [sp, #12]
 8001550:	68da      	ldr	r2, [r3, #12]
 8001552:	9203      	str	r2, [sp, #12]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	9303      	str	r3, [sp, #12]
 8001558:	9b03      	ldr	r3, [sp, #12]
 800155a:	e759      	b.n	8001410 <HAL_SPI_TransmitReceive.part.1+0x30>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800155c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800155e:	b29b      	uxth	r3, r3
 8001560:	2b01      	cmp	r3, #1
 8001562:	d190      	bne.n	8001486 <HAL_SPI_TransmitReceive.part.1+0xa6>
 8001564:	e788      	b.n	8001478 <HAL_SPI_TransmitReceive.part.1+0x98>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001566:	f1b9 0f00 	cmp.w	r9, #0
 800156a:	d00f      	beq.n	800158c <HAL_SPI_TransmitReceive.part.1+0x1ac>
 800156c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800156e:	b29b      	uxth	r3, r3
 8001570:	b163      	cbz	r3, 800158c <HAL_SPI_TransmitReceive.part.1+0x1ac>
 8001572:	6823      	ldr	r3, [r4, #0]
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	0791      	lsls	r1, r2, #30
 8001578:	d508      	bpl.n	800158c <HAL_SPI_TransmitReceive.part.1+0x1ac>
        txallowed = 0U;
 800157a:	f04f 0900 	mov.w	r9, #0
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800157e:	f837 2b02 	ldrh.w	r2, [r7], #2
 8001582:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001584:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001586:	3b01      	subs	r3, #1
 8001588:	b29b      	uxth	r3, r3
 800158a:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800158c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800158e:	b29b      	uxth	r3, r3
 8001590:	b163      	cbz	r3, 80015ac <HAL_SPI_TransmitReceive.part.1+0x1cc>
 8001592:	6823      	ldr	r3, [r4, #0]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	07d2      	lsls	r2, r2, #31
 8001598:	d508      	bpl.n	80015ac <HAL_SPI_TransmitReceive.part.1+0x1cc>
        txallowed = 1U;
 800159a:	f04f 0901 	mov.w	r9, #1
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 80015a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015a6:	3b01      	subs	r3, #1
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80015ac:	1c68      	adds	r0, r5, #1
 80015ae:	d0af      	beq.n	8001510 <HAL_SPI_TransmitReceive.part.1+0x130>
 80015b0:	f7fe fe0c 	bl	80001cc <HAL_GetTick>
 80015b4:	eba0 0008 	sub.w	r0, r0, r8
 80015b8:	4285      	cmp	r5, r0
 80015ba:	d8a9      	bhi.n	8001510 <HAL_SPI_TransmitReceive.part.1+0x130>
 80015bc:	e797      	b.n	80014ee <HAL_SPI_TransmitReceive.part.1+0x10e>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80015be:	f837 3b02 	ldrh.w	r3, [r7], #2
 80015c2:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 80015c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80015c6:	3b01      	subs	r3, #1
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	86e3      	strh	r3, [r4, #54]	; 0x36
 80015cc:	e79e      	b.n	800150c <HAL_SPI_TransmitReceive.part.1+0x12c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80015ce:	2220      	movs	r2, #32
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80015d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80015d2:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80015d4:	4313      	orrs	r3, r2
 80015d6:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80015d8:	6562      	str	r2, [r4, #84]	; 0x54
 80015da:	e719      	b.n	8001410 <HAL_SPI_TransmitReceive.part.1+0x30>

080015dc <HAL_SPI_TransmitReceive>:
{
 80015dc:	b410      	push	{r4}
  __HAL_LOCK(hspi);
 80015de:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 80015e2:	2c01      	cmp	r4, #1
 80015e4:	d002      	beq.n	80015ec <HAL_SPI_TransmitReceive+0x10>
}
 80015e6:	bc10      	pop	{r4}
 80015e8:	f7ff befa 	b.w	80013e0 <HAL_SPI_TransmitReceive.part.1>
 80015ec:	2002      	movs	r0, #2
 80015ee:	bc10      	pop	{r4}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop

080015f4 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80015f4:	2800      	cmp	r0, #0
 80015f6:	d039      	beq.n	800166c <HAL_SPI_Init+0x78>
{
 80015f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015fa:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80015fc:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
 8001600:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001602:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8001604:	b372      	cbz	r2, 8001664 <HAL_SPI_Init+0x70>
 8001606:	461a      	mov	r2, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001608:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 800160c:	2702      	movs	r7, #2
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800160e:	2100      	movs	r1, #0
  hspi->State = HAL_SPI_STATE_READY;
 8001610:	2501      	movs	r5, #1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001612:	68e0      	ldr	r0, [r4, #12]
 8001614:	4333      	orrs	r3, r6
 8001616:	6926      	ldr	r6, [r4, #16]
 8001618:	4303      	orrs	r3, r0
 800161a:	6960      	ldr	r0, [r4, #20]
 800161c:	4333      	orrs	r3, r6
 800161e:	69e6      	ldr	r6, [r4, #28]
 8001620:	4303      	orrs	r3, r0
 8001622:	4333      	orrs	r3, r6
 8001624:	6a20      	ldr	r0, [r4, #32]
 8001626:	69a6      	ldr	r6, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001628:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800162c:	4303      	orrs	r3, r0
  __HAL_SPI_DISABLE(hspi);
 800162e:	6827      	ldr	r7, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001630:	f406 7000 	and.w	r0, r6, #512	; 0x200
 8001634:	4303      	orrs	r3, r0
 8001636:	4313      	orrs	r3, r2
  __HAL_SPI_DISABLE(hspi);
 8001638:	683a      	ldr	r2, [r7, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800163a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  __HAL_SPI_DISABLE(hspi);
 800163c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001640:	0c36      	lsrs	r6, r6, #16
  __HAL_SPI_DISABLE(hspi);
 8001642:	603a      	str	r2, [r7, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001644:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001648:	603b      	str	r3, [r7, #0]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800164a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800164c:	4306      	orrs	r6, r0
 800164e:	607e      	str	r6, [r7, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001650:	613b      	str	r3, [r7, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001652:	69fb      	ldr	r3, [r7, #28]
  
  return HAL_OK;
 8001654:	4608      	mov	r0, r1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001656:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800165a:	61fb      	str	r3, [r7, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800165c:	6561      	str	r1, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800165e:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 8001662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_SPI_MspInit(hspi);
 8001664:	f001 f930 	bl	80028c8 <HAL_SPI_MspInit>
 8001668:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800166a:	e7cd      	b.n	8001608 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 800166c:	2001      	movs	r0, #1
}
 800166e:	4770      	bx	lr

08001670 <HAL_TIM_Base_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001670:	2202      	movs	r2, #2
{
 8001672:	b410      	push	{r4}

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001674:	2401      	movs	r4, #1
{
 8001676:	4603      	mov	r3, r0
  __HAL_TIM_ENABLE(htim);
 8001678:	6801      	ldr	r1, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800167a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 800167e:	680a      	ldr	r2, [r1, #0]

  /* Return function status */
  return HAL_OK;
}
 8001680:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001682:	4322      	orrs	r2, r4
 8001684:	600a      	str	r2, [r1, #0]
  htim->State= HAL_TIM_STATE_READY;
 8001686:	f883 403d 	strb.w	r4, [r3, #61]	; 0x3d
}
 800168a:	bc10      	pop	{r4}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop

08001690 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001690:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001692:	2002      	movs	r0, #2

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001694:	f241 1111 	movw	r1, #4369	; 0x1111
 8001698:	681a      	ldr	r2, [r3, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800169a:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800169e:	6a10      	ldr	r0, [r2, #32]
 80016a0:	4208      	tst	r0, r1
 80016a2:	d108      	bne.n	80016b6 <HAL_TIM_Base_Stop+0x26>
 80016a4:	f240 4144 	movw	r1, #1092	; 0x444
 80016a8:	6a10      	ldr	r0, [r2, #32]
 80016aa:	4208      	tst	r0, r1
 80016ac:	d103      	bne.n	80016b6 <HAL_TIM_Base_Stop+0x26>
 80016ae:	6811      	ldr	r1, [r2, #0]
 80016b0:	f021 0101 	bic.w	r1, r1, #1
 80016b4:	6011      	str	r1, [r2, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80016b6:	2201      	movs	r2, #1

  /* Return function status */
  return HAL_OK;
}
 80016b8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80016ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80016be:	4770      	bx	lr

080016c0 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 80016c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d067      	beq.n	8001798 <HAL_TIM_ConfigClockSource+0xd8>

  htim->State = HAL_TIM_STATE_BUSY;
 80016c8:	2202      	movs	r2, #2
{
 80016ca:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 80016cc:	2501      	movs	r5, #1

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80016ce:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80016d0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80016d4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 80016d6:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016d8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80016dc:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 80016e0:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 80016e2:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 80016e6:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80016e8:	f000 8093 	beq.w	8001812 <HAL_TIM_ConfigClockSource+0x152>
 80016ec:	d918      	bls.n	8001720 <HAL_TIM_ConfigClockSource+0x60>
 80016ee:	2c70      	cmp	r4, #112	; 0x70
 80016f0:	d07f      	beq.n	80017f2 <HAL_TIM_ConfigClockSource+0x132>
 80016f2:	d92b      	bls.n	800174c <HAL_TIM_ConfigClockSource+0x8c>
 80016f4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80016f8:	d076      	beq.n	80017e8 <HAL_TIM_ConfigClockSource+0x128>
 80016fa:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 80016fe:	d11c      	bne.n	800173a <HAL_TIM_ConfigClockSource+0x7a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001700:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8001704:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8001706:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001708:	432a      	orrs	r2, r5
 800170a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800170e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001712:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001714:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800171c:	609a      	str	r2, [r3, #8]
    break;
 800171e:	e00c      	b.n	800173a <HAL_TIM_ConfigClockSource+0x7a>
  switch (sClockSourceConfig->ClockSource)
 8001720:	2c10      	cmp	r4, #16
 8001722:	d042      	beq.n	80017aa <HAL_TIM_ConfigClockSource+0xea>
 8001724:	d92f      	bls.n	8001786 <HAL_TIM_ConfigClockSource+0xc6>
 8001726:	2c20      	cmp	r4, #32
 8001728:	d038      	beq.n	800179c <HAL_TIM_ConfigClockSource+0xdc>
 800172a:	2c30      	cmp	r4, #48	; 0x30
 800172c:	d105      	bne.n	800173a <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr = TIMx->SMCR;
 800172e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001730:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001734:	f042 0237 	orr.w	r2, r2, #55	; 0x37
   TIMx->SMCR = tmpsmcr;
 8001738:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 800173a:	2300      	movs	r3, #0
}
 800173c:	bcf0      	pop	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_READY;
 800173e:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8001740:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8001744:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  return HAL_OK;
 8001748:	4618      	mov	r0, r3
}
 800174a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800174c:	2c50      	cmp	r4, #80	; 0x50
 800174e:	d033      	beq.n	80017b8 <HAL_TIM_ConfigClockSource+0xf8>
 8001750:	2c60      	cmp	r4, #96	; 0x60
 8001752:	d1f2      	bne.n	800173a <HAL_TIM_ConfigClockSource+0x7a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001754:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001756:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001758:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800175c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800175e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001760:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001762:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001764:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001768:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800176c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001770:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001774:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001776:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001778:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800177a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800177e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
   TIMx->SMCR = tmpsmcr;
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	e7d9      	b.n	800173a <HAL_TIM_ConfigClockSource+0x7a>
  switch (sClockSourceConfig->ClockSource)
 8001786:	2c00      	cmp	r4, #0
 8001788:	d1d7      	bne.n	800173a <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr = TIMx->SMCR;
 800178a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800178c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001790:	f042 0207 	orr.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	e7d0      	b.n	800173a <HAL_TIM_ConfigClockSource+0x7a>
  __HAL_LOCK(htim);
 8001798:	2002      	movs	r0, #2
}
 800179a:	4770      	bx	lr
   tmpsmcr = TIMx->SMCR;
 800179c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800179e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80017a2:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   TIMx->SMCR = tmpsmcr;
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	e7c7      	b.n	800173a <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr = TIMx->SMCR;
 80017aa:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80017ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80017b0:	f042 0217 	orr.w	r2, r2, #23
   TIMx->SMCR = tmpsmcr;
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	e7c0      	b.n	800173a <HAL_TIM_ConfigClockSource+0x7a>
  tmpccer = TIMx->CCER;
 80017b8:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80017ba:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80017bc:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80017be:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 80017c2:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80017c4:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80017c6:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80017c8:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80017cc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80017d0:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80017d4:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80017d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80017d8:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80017da:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80017dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80017e0:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	e7a8      	b.n	800173a <HAL_TIM_ConfigClockSource+0x7a>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	f022 0207 	bic.w	r2, r2, #7
 80017ee:	609a      	str	r2, [r3, #8]
    break;
 80017f0:	e7a3      	b.n	800173a <HAL_TIM_ConfigClockSource+0x7a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017f2:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 80017f6:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80017f8:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017fa:	432a      	orrs	r2, r5
 80017fc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001800:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001804:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8001806:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001808:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800180a:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800180e:	609a      	str	r2, [r3, #8]
    break;
 8001810:	e793      	b.n	800173a <HAL_TIM_ConfigClockSource+0x7a>
  tmpccer = TIMx->CCER;
 8001812:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001814:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001816:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001818:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800181c:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800181e:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001820:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001822:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001826:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800182a:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800182e:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001830:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001832:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001834:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001836:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800183a:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   TIMx->SMCR = tmpsmcr;
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	e77b      	b.n	800173a <HAL_TIM_ConfigClockSource+0x7a>
 8001842:	bf00      	nop

08001844 <HAL_TIM_PeriodElapsedCallback>:
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop

08001848 <HAL_TIM_OC_DelayElapsedCallback>:
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop

0800184c <HAL_TIM_IC_CaptureCallback>:
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop

08001850 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop

08001854 <HAL_TIM_TriggerCallback>:
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop

08001858 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001858:	6803      	ldr	r3, [r0, #0]
{
 800185a:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800185c:	691a      	ldr	r2, [r3, #16]
{
 800185e:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001860:	0791      	lsls	r1, r2, #30
 8001862:	d502      	bpl.n	800186a <HAL_TIM_IRQHandler+0x12>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001864:	68da      	ldr	r2, [r3, #12]
 8001866:	0792      	lsls	r2, r2, #30
 8001868:	d45f      	bmi.n	800192a <HAL_TIM_IRQHandler+0xd2>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	0750      	lsls	r0, r2, #29
 800186e:	d502      	bpl.n	8001876 <HAL_TIM_IRQHandler+0x1e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	0751      	lsls	r1, r2, #29
 8001874:	d446      	bmi.n	8001904 <HAL_TIM_IRQHandler+0xac>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001876:	691a      	ldr	r2, [r3, #16]
 8001878:	0712      	lsls	r2, r2, #28
 800187a:	d502      	bpl.n	8001882 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	0710      	lsls	r0, r2, #28
 8001880:	d42e      	bmi.n	80018e0 <HAL_TIM_IRQHandler+0x88>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	06d2      	lsls	r2, r2, #27
 8001886:	d502      	bpl.n	800188e <HAL_TIM_IRQHandler+0x36>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	06d0      	lsls	r0, r2, #27
 800188c:	d418      	bmi.n	80018c0 <HAL_TIM_IRQHandler+0x68>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800188e:	691a      	ldr	r2, [r3, #16]
 8001890:	07d1      	lsls	r1, r2, #31
 8001892:	d502      	bpl.n	800189a <HAL_TIM_IRQHandler+0x42>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	07d2      	lsls	r2, r2, #31
 8001898:	d45d      	bmi.n	8001956 <HAL_TIM_IRQHandler+0xfe>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	0610      	lsls	r0, r2, #24
 800189e:	d502      	bpl.n	80018a6 <HAL_TIM_IRQHandler+0x4e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	0611      	lsls	r1, r2, #24
 80018a4:	d45f      	bmi.n	8001966 <HAL_TIM_IRQHandler+0x10e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	0652      	lsls	r2, r2, #25
 80018aa:	d502      	bpl.n	80018b2 <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	0650      	lsls	r0, r2, #25
 80018b0:	d461      	bmi.n	8001976 <HAL_TIM_IRQHandler+0x11e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018b2:	691a      	ldr	r2, [r3, #16]
 80018b4:	0691      	lsls	r1, r2, #26
 80018b6:	d502      	bpl.n	80018be <HAL_TIM_IRQHandler+0x66>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	0692      	lsls	r2, r2, #26
 80018bc:	d443      	bmi.n	8001946 <HAL_TIM_IRQHandler+0xee>
}
 80018be:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018c0:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018c4:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018c6:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018c8:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80018ca:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018cc:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018d0:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018d2:	d064      	beq.n	800199e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80018d4:	f7ff ffba 	bl	800184c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018d8:	2200      	movs	r2, #0
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	7722      	strb	r2, [r4, #28]
 80018de:	e7d6      	b.n	800188e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018e0:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018e4:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018e6:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018e8:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80018ea:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018ec:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018ee:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018f0:	d152      	bne.n	8001998 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018f2:	f7ff ffa9 	bl	8001848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018f6:	4620      	mov	r0, r4
 80018f8:	f7ff ffaa 	bl	8001850 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018fc:	2200      	movs	r2, #0
 80018fe:	6823      	ldr	r3, [r4, #0]
 8001900:	7722      	strb	r2, [r4, #28]
 8001902:	e7be      	b.n	8001882 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001904:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001908:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800190a:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800190c:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800190e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001910:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001914:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001916:	d13c      	bne.n	8001992 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001918:	f7ff ff96 	bl	8001848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800191c:	4620      	mov	r0, r4
 800191e:	f7ff ff97 	bl	8001850 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001922:	2200      	movs	r2, #0
 8001924:	6823      	ldr	r3, [r4, #0]
 8001926:	7722      	strb	r2, [r4, #28]
 8001928:	e7a5      	b.n	8001876 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800192a:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800192e:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001930:	6119      	str	r1, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001932:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001934:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001936:	079b      	lsls	r3, r3, #30
 8001938:	d025      	beq.n	8001986 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800193a:	f7ff ff87 	bl	800184c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800193e:	2200      	movs	r2, #0
 8001940:	6823      	ldr	r3, [r4, #0]
 8001942:	7722      	strb	r2, [r4, #28]
 8001944:	e791      	b.n	800186a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001946:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800194a:	4620      	mov	r0, r4
}
 800194c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001950:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001952:	f000 b8a9 	b.w	8001aa8 <HAL_TIMEx_CommutationCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001956:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800195a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800195c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800195e:	f7ff ff71 	bl	8001844 <HAL_TIM_PeriodElapsedCallback>
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	e799      	b.n	800189a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001966:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800196a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800196c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800196e:	f000 f89d 	bl	8001aac <HAL_TIMEx_BreakCallback>
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	e797      	b.n	80018a6 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001976:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800197a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800197c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800197e:	f7ff ff69 	bl	8001854 <HAL_TIM_TriggerCallback>
 8001982:	6823      	ldr	r3, [r4, #0]
 8001984:	e795      	b.n	80018b2 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001986:	f7ff ff5f 	bl	8001848 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800198a:	4620      	mov	r0, r4
 800198c:	f7ff ff60 	bl	8001850 <HAL_TIM_PWM_PulseFinishedCallback>
 8001990:	e7d5      	b.n	800193e <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8001992:	f7ff ff5b 	bl	800184c <HAL_TIM_IC_CaptureCallback>
 8001996:	e7c4      	b.n	8001922 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8001998:	f7ff ff58 	bl	800184c <HAL_TIM_IC_CaptureCallback>
 800199c:	e7ae      	b.n	80018fc <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800199e:	f7ff ff53 	bl	8001848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019a2:	4620      	mov	r0, r4
 80019a4:	f7ff ff54 	bl	8001850 <HAL_TIM_PWM_PulseFinishedCallback>
 80019a8:	e796      	b.n	80018d8 <HAL_TIM_IRQHandler+0x80>
 80019aa:	bf00      	nop

080019ac <TIM_Base_SetConfig>:
{
 80019ac:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019ae:	4e1c      	ldr	r6, [pc, #112]	; (8001a20 <TIM_Base_SetConfig+0x74>)
  tmpcr1 = TIMx->CR1;
 80019b0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019b2:	42b0      	cmp	r0, r6
 80019b4:	694d      	ldr	r5, [r1, #20]
 80019b6:	688c      	ldr	r4, [r1, #8]
 80019b8:	680a      	ldr	r2, [r1, #0]
 80019ba:	d01d      	beq.n	80019f8 <TIM_Base_SetConfig+0x4c>
 80019bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80019c0:	d011      	beq.n	80019e6 <TIM_Base_SetConfig+0x3a>
 80019c2:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80019c6:	42b0      	cmp	r0, r6
 80019c8:	d00d      	beq.n	80019e6 <TIM_Base_SetConfig+0x3a>
 80019ca:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80019ce:	42b0      	cmp	r0, r6
 80019d0:	d009      	beq.n	80019e6 <TIM_Base_SetConfig+0x3a>
  tmpcr1 &= ~TIM_CR1_ARPE;
 80019d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80019d6:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80019d8:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 80019da:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019dc:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80019de:	6282      	str	r2, [r0, #40]	; 0x28
}
 80019e0:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 80019e2:	6143      	str	r3, [r0, #20]
}
 80019e4:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80019e6:	684e      	ldr	r6, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80019ec:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019ee:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80019f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019f4:	430b      	orrs	r3, r1
 80019f6:	e7ec      	b.n	80019d2 <TIM_Base_SetConfig+0x26>
    tmpcr1 |= Structure->CounterMode;
 80019f8:	684e      	ldr	r6, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80019fe:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a00:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a06:	4333      	orrs	r3, r6
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001a08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001a0c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001a0e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a10:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001a12:	6282      	str	r2, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001a14:	690b      	ldr	r3, [r1, #16]
}
 8001a16:	bc70      	pop	{r4, r5, r6}
    TIMx->RCR = Structure->RepetitionCounter;
 8001a18:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	6143      	str	r3, [r0, #20]
}
 8001a1e:	4770      	bx	lr
 8001a20:	40012c00 	.word	0x40012c00

08001a24 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8001a24:	b1b8      	cbz	r0, 8001a56 <HAL_TIM_Base_Init+0x32>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001a26:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8001a2a:	b510      	push	{r4, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8001a2c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a30:	4604      	mov	r4, r0
 8001a32:	b15b      	cbz	r3, 8001a4c <HAL_TIM_Base_Init+0x28>
  htim->State= HAL_TIM_STATE_BUSY;
 8001a34:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a36:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001a38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a3c:	1d21      	adds	r1, r4, #4
 8001a3e:	f7ff ffb5 	bl	80019ac <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001a42:	2301      	movs	r3, #1
  return HAL_OK;
 8001a44:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001a46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001a4a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001a4c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001a50:	f000 ff76 	bl	8002940 <HAL_TIM_Base_MspInit>
 8001a54:	e7ee      	b.n	8001a34 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8001a56:	2001      	movs	r0, #1
}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop

08001a5c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001a5c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d01e      	beq.n	8001aa2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8001a64:	4602      	mov	r2, r0

  htim->State = HAL_TIM_STATE_BUSY;
 8001a66:	2002      	movs	r0, #2
{
 8001a68:	b4f0      	push	{r4, r5, r6, r7}
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8001a6a:	2500      	movs	r5, #0
  htim->State = HAL_TIM_STATE_READY;
 8001a6c:	2601      	movs	r6, #1
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001a6e:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001a70:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001a74:	685c      	ldr	r4, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001a76:	680f      	ldr	r7, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001a78:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8001a7c:	605c      	str	r4, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001a7e:	6858      	ldr	r0, [r3, #4]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001a80:	684c      	ldr	r4, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001a82:	4338      	orrs	r0, r7
 8001a84:	6058      	str	r0, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001a86:	6898      	ldr	r0, [r3, #8]
 8001a88:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8001a8c:	6098      	str	r0, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001a8e:	6899      	ldr	r1, [r3, #8]

  return HAL_OK;
 8001a90:	4628      	mov	r0, r5
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001a92:	4321      	orrs	r1, r4
 8001a94:	6099      	str	r1, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001a96:	f882 603d 	strb.w	r6, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001a9a:	f882 503c 	strb.w	r5, [r2, #60]	; 0x3c
}
 8001a9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001aa0:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001aa2:	2002      	movs	r0, #2
}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop

08001aa8 <HAL_TIMEx_CommutationCallback>:
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop

08001aac <HAL_TIMEx_BreakCallback>:
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop

08001ab0 <_Z13RF_delay_initv>:

extern TIM_HandleTypeDef htim3;
bool timSet = false;

/*Delay em microsegundos*/
void RF_delay_init(void){
 8001ab0:	b530      	push	{r4, r5, lr}
	  TIM_ClockConfigTypeDef sClockSourceConfig;
	  TIM_MasterConfigTypeDef sMasterConfig;
	  htim3.Instance = TIM3;
	  htim3.Init.Prescaler = 1000;
 8001ab2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab6:	2500      	movs	r5, #0
	  htim3.Init.Period = 65535;
 8001ab8:	f64f 73ff 	movw	r3, #65535	; 0xffff
	  htim3.Instance = TIM3;
 8001abc:	4c0d      	ldr	r4, [pc, #52]	; (8001af4 <_Z13RF_delay_initv+0x44>)
 8001abe:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <_Z13RF_delay_initv+0x48>)
void RF_delay_init(void){
 8001ac0:	b087      	sub	sp, #28
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	  HAL_TIM_Base_Init(&htim3);
 8001ac2:	4620      	mov	r0, r4
	  htim3.Instance = TIM3;
 8001ac4:	e9c4 2100 	strd	r2, r1, [r4]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac8:	e9c4 5302 	strd	r5, r3, [r4, #8]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001acc:	6125      	str	r5, [r4, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ace:	61a5      	str	r5, [r4, #24]
	  HAL_TIM_Base_Init(&htim3);
 8001ad0:	f7ff ffa8 	bl	8001a24 <HAL_TIM_Base_Init>

	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad8:	a906      	add	r1, sp, #24
 8001ada:	f841 3d10 	str.w	r3, [r1, #-16]!
	  HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 8001ade:	4620      	mov	r0, r4
 8001ae0:	f7ff fdee 	bl	80016c0 <HAL_TIM_ConfigClockSource>

	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	  HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	4669      	mov	r1, sp
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae8:	e9cd 5500 	strd	r5, r5, [sp]
	  HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 8001aec:	f7ff ffb6 	bl	8001a5c <HAL_TIMEx_MasterConfigSynchronization>

}
 8001af0:	b007      	add	sp, #28
 8001af2:	bd30      	pop	{r4, r5, pc}
 8001af4:	20000028 	.word	0x20000028
 8001af8:	40000400 	.word	0x40000400

08001afc <_ZN5nRF2410microDelayEi>:

void nRF24::microDelay(int multiplo){
 8001afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i = 0;
	for(i = 1; i <= multiplo; i++){
 8001b00:	1e0f      	subs	r7, r1, #0
 8001b02:	dd16      	ble.n	8001b32 <_ZN5nRF2410microDelayEi+0x36>
		TIM3->CNT = 0;
 8001b04:	f04f 0800 	mov.w	r8, #0
	for(i = 1; i <= multiplo; i++){
 8001b08:	2501      	movs	r5, #1
		TIM3->CNT = 0;
 8001b0a:	46c1      	mov	r9, r8
 8001b0c:	4c0a      	ldr	r4, [pc, #40]	; (8001b38 <_ZN5nRF2410microDelayEi+0x3c>)
		HAL_TIM_Base_Start(&htim3);
 8001b0e:	4e0b      	ldr	r6, [pc, #44]	; (8001b3c <_ZN5nRF2410microDelayEi+0x40>)
 8001b10:	442f      	add	r7, r5
		TIM3->CNT = 0;
 8001b12:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		HAL_TIM_Base_Start(&htim3);
 8001b16:	4630      	mov	r0, r6
 8001b18:	f7ff fdaa 	bl	8001670 <HAL_TIM_Base_Start>
		while(TIM3->CNT == 0);
 8001b1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0fc      	beq.n	8001b1c <_ZN5nRF2410microDelayEi+0x20>
	for(i = 1; i <= multiplo; i++){
 8001b22:	3501      	adds	r5, #1
		HAL_TIM_Base_Stop(&htim3);
 8001b24:	4630      	mov	r0, r6
 8001b26:	f7ff fdb3 	bl	8001690 <HAL_TIM_Base_Stop>
	for(i = 1; i <= multiplo; i++){
 8001b2a:	42bd      	cmp	r5, r7
		TIM3->CNT = 0;
 8001b2c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
	for(i = 1; i <= multiplo; i++){
 8001b30:	d1ef      	bne.n	8001b12 <_ZN5nRF2410microDelayEi+0x16>
	}
}
 8001b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b36:	bf00      	nop
 8001b38:	40000400 	.word	0x40000400
 8001b3c:	20000028 	.word	0x20000028

08001b40 <_Z12digitalWritehb>:
/**/

void digitalWrite(uint8_t pin, bool highLow){
    switch(pin){
 8001b40:	3802      	subs	r0, #2
 8001b42:	282c      	cmp	r0, #44	; 0x2c
 8001b44:	f200 80fb 	bhi.w	8001d3e <_Z12digitalWritehb+0x1fe>
 8001b48:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001b4c:	00ed00f3 	.word	0x00ed00f3
 8001b50:	00e200e7 	.word	0x00e200e7
 8001b54:	00f900dd 	.word	0x00f900dd
 8001b58:	00f900f9 	.word	0x00f900f9
 8001b5c:	00d300d8 	.word	0x00d300d8
 8001b60:	00c900ce 	.word	0x00c900ce
 8001b64:	00bf00c4 	.word	0x00bf00c4
 8001b68:	00b500ba 	.word	0x00b500ba
 8001b6c:	00ab00b0 	.word	0x00ab00b0
 8001b70:	00a000a6 	.word	0x00a000a6
 8001b74:	00f9009a 	.word	0x00f9009a
 8001b78:	009400f9 	.word	0x009400f9
 8001b7c:	0088008e 	.word	0x0088008e
 8001b80:	007c0082 	.word	0x007c0082
 8001b84:	00700076 	.word	0x00700076
 8001b88:	0064006a 	.word	0x0064006a
 8001b8c:	00f9005e 	.word	0x00f9005e
 8001b90:	005800f9 	.word	0x005800f9
 8001b94:	004d0052 	.word	0x004d0052
 8001b98:	00430048 	.word	0x00430048
 8001b9c:	0039003e 	.word	0x0039003e
 8001ba0:	003300f9 	.word	0x003300f9
 8001ba4:	002d      	.short	0x002d
            break;
        case(45):
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
            break;
        case(46):
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001ba6:	460a      	mov	r2, r1
 8001ba8:	4865      	ldr	r0, [pc, #404]	; (8001d40 <_Z12digitalWritehb+0x200>)
 8001baa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bae:	f7ff b871 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001bb2:	460a      	mov	r2, r1
 8001bb4:	4862      	ldr	r0, [pc, #392]	; (8001d40 <_Z12digitalWritehb+0x200>)
 8001bb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bba:	f7ff b86b 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001bbe:	460a      	mov	r2, r1
 8001bc0:	485f      	ldr	r0, [pc, #380]	; (8001d40 <_Z12digitalWritehb+0x200>)
 8001bc2:	2180      	movs	r1, #128	; 0x80
 8001bc4:	f7ff b866 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001bc8:	460a      	mov	r2, r1
 8001bca:	485d      	ldr	r0, [pc, #372]	; (8001d40 <_Z12digitalWritehb+0x200>)
 8001bcc:	2140      	movs	r1, #64	; 0x40
 8001bce:	f7ff b861 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001bd2:	460a      	mov	r2, r1
 8001bd4:	485a      	ldr	r0, [pc, #360]	; (8001d40 <_Z12digitalWritehb+0x200>)
 8001bd6:	2120      	movs	r1, #32
 8001bd8:	f7ff b85c 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001bdc:	460a      	mov	r2, r1
 8001bde:	4858      	ldr	r0, [pc, #352]	; (8001d40 <_Z12digitalWritehb+0x200>)
 8001be0:	2110      	movs	r1, #16
 8001be2:	f7ff b857 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001be6:	460a      	mov	r2, r1
 8001be8:	4855      	ldr	r0, [pc, #340]	; (8001d40 <_Z12digitalWritehb+0x200>)
 8001bea:	2108      	movs	r1, #8
 8001bec:	f7ff b852 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001bf0:	460a      	mov	r2, r1
 8001bf2:	4854      	ldr	r0, [pc, #336]	; (8001d44 <_Z12digitalWritehb+0x204>)
 8001bf4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bf8:	f7ff b84c 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	4851      	ldr	r0, [pc, #324]	; (8001d44 <_Z12digitalWritehb+0x204>)
 8001c00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c04:	f7ff b846 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001c08:	460a      	mov	r2, r1
 8001c0a:	484e      	ldr	r0, [pc, #312]	; (8001d44 <_Z12digitalWritehb+0x204>)
 8001c0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c10:	f7ff b840 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001c14:	460a      	mov	r2, r1
 8001c16:	484b      	ldr	r0, [pc, #300]	; (8001d44 <_Z12digitalWritehb+0x204>)
 8001c18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c1c:	f7ff b83a 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001c20:	460a      	mov	r2, r1
 8001c22:	4848      	ldr	r0, [pc, #288]	; (8001d44 <_Z12digitalWritehb+0x204>)
 8001c24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c28:	f7ff b834 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001c2c:	460a      	mov	r2, r1
 8001c2e:	4845      	ldr	r0, [pc, #276]	; (8001d44 <_Z12digitalWritehb+0x204>)
 8001c30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c34:	f7ff b82e 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001c38:	460a      	mov	r2, r1
 8001c3a:	4842      	ldr	r0, [pc, #264]	; (8001d44 <_Z12digitalWritehb+0x204>)
 8001c3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c40:	f7ff b828 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001c44:	460a      	mov	r2, r1
 8001c46:	483f      	ldr	r0, [pc, #252]	; (8001d44 <_Z12digitalWritehb+0x204>)
 8001c48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c4c:	f7ff b822 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001c50:	460a      	mov	r2, r1
 8001c52:	483b      	ldr	r0, [pc, #236]	; (8001d40 <_Z12digitalWritehb+0x200>)
 8001c54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c58:	f7ff b81c 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001c5c:	460a      	mov	r2, r1
 8001c5e:	4838      	ldr	r0, [pc, #224]	; (8001d40 <_Z12digitalWritehb+0x200>)
 8001c60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c64:	f7ff b816 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001c68:	460a      	mov	r2, r1
 8001c6a:	4835      	ldr	r0, [pc, #212]	; (8001d40 <_Z12digitalWritehb+0x200>)
 8001c6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c70:	f7ff b810 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001c74:	460a      	mov	r2, r1
 8001c76:	4832      	ldr	r0, [pc, #200]	; (8001d40 <_Z12digitalWritehb+0x200>)
 8001c78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c7c:	f7ff b80a 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001c80:	460a      	mov	r2, r1
 8001c82:	482f      	ldr	r0, [pc, #188]	; (8001d40 <_Z12digitalWritehb+0x200>)
 8001c84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c88:	f7ff b804 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001c8c:	460a      	mov	r2, r1
 8001c8e:	482c      	ldr	r0, [pc, #176]	; (8001d40 <_Z12digitalWritehb+0x200>)
 8001c90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c94:	f7fe bffe 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001c98:	460a      	mov	r2, r1
 8001c9a:	4829      	ldr	r0, [pc, #164]	; (8001d40 <_Z12digitalWritehb+0x200>)
 8001c9c:	2104      	movs	r1, #4
 8001c9e:	f7fe bff9 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001ca2:	460a      	mov	r2, r1
 8001ca4:	4826      	ldr	r0, [pc, #152]	; (8001d40 <_Z12digitalWritehb+0x200>)
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	f7fe bff4 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001cac:	460a      	mov	r2, r1
 8001cae:	4824      	ldr	r0, [pc, #144]	; (8001d40 <_Z12digitalWritehb+0x200>)
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	f7fe bfef 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001cb6:	460a      	mov	r2, r1
 8001cb8:	4822      	ldr	r0, [pc, #136]	; (8001d44 <_Z12digitalWritehb+0x204>)
 8001cba:	2180      	movs	r1, #128	; 0x80
 8001cbc:	f7fe bfea 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	4820      	ldr	r0, [pc, #128]	; (8001d44 <_Z12digitalWritehb+0x204>)
 8001cc4:	2140      	movs	r1, #64	; 0x40
 8001cc6:	f7fe bfe5 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001cca:	460a      	mov	r2, r1
 8001ccc:	481d      	ldr	r0, [pc, #116]	; (8001d44 <_Z12digitalWritehb+0x204>)
 8001cce:	2120      	movs	r1, #32
 8001cd0:	f7fe bfe0 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001cd4:	460a      	mov	r2, r1
 8001cd6:	481b      	ldr	r0, [pc, #108]	; (8001d44 <_Z12digitalWritehb+0x204>)
 8001cd8:	2110      	movs	r1, #16
 8001cda:	f7fe bfdb 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001cde:	460a      	mov	r2, r1
 8001ce0:	4818      	ldr	r0, [pc, #96]	; (8001d44 <_Z12digitalWritehb+0x204>)
 8001ce2:	2108      	movs	r1, #8
 8001ce4:	f7fe bfd6 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001ce8:	460a      	mov	r2, r1
 8001cea:	4816      	ldr	r0, [pc, #88]	; (8001d44 <_Z12digitalWritehb+0x204>)
 8001cec:	2104      	movs	r1, #4
 8001cee:	f7fe bfd1 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001cf2:	460a      	mov	r2, r1
 8001cf4:	4813      	ldr	r0, [pc, #76]	; (8001d44 <_Z12digitalWritehb+0x204>)
 8001cf6:	2102      	movs	r1, #2
 8001cf8:	f7fe bfcc 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001cfc:	460a      	mov	r2, r1
 8001cfe:	4811      	ldr	r0, [pc, #68]	; (8001d44 <_Z12digitalWritehb+0x204>)
 8001d00:	2101      	movs	r1, #1
 8001d02:	f7fe bfc7 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001d06:	460a      	mov	r2, r1
 8001d08:	480f      	ldr	r0, [pc, #60]	; (8001d48 <_Z12digitalWritehb+0x208>)
 8001d0a:	2102      	movs	r1, #2
 8001d0c:	f7fe bfc2 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001d10:	460a      	mov	r2, r1
 8001d12:	480d      	ldr	r0, [pc, #52]	; (8001d48 <_Z12digitalWritehb+0x208>)
 8001d14:	2101      	movs	r1, #1
 8001d16:	f7fe bfbd 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001d1a:	460a      	mov	r2, r1
 8001d1c:	480b      	ldr	r0, [pc, #44]	; (8001d4c <_Z12digitalWritehb+0x20c>)
 8001d1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d22:	f7fe bfb7 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001d26:	460a      	mov	r2, r1
 8001d28:	4808      	ldr	r0, [pc, #32]	; (8001d4c <_Z12digitalWritehb+0x20c>)
 8001d2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d2e:	f7fe bfb1 	b.w	8000c94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, highLow?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001d32:	460a      	mov	r2, r1
 8001d34:	4805      	ldr	r0, [pc, #20]	; (8001d4c <_Z12digitalWritehb+0x20c>)
 8001d36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d3a:	f7fe bfab 	b.w	8000c94 <HAL_GPIO_WritePin>
            break;
        default:
            break;

    }
}
 8001d3e:	4770      	bx	lr
 8001d40:	40010c00 	.word	0x40010c00
 8001d44:	40010800 	.word	0x40010800
 8001d48:	40011400 	.word	0x40011400
 8001d4c:	40011000 	.word	0x40011000

08001d50 <_ZN5nRF2413writeRegisterEjj>:
        writeRegister(RX_PW_P0 + cachePipeAddress, pipePacakgeSize[cachePipeAddress]);
	}

}

void nRF24::writeRegister(unsigned int reg, unsigned int _data) {
 8001d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d52:	4604      	mov	r4, r0
  HAL_SPI_TransmitReceive(globalHSPI, &data2Send, &buf2Receive, 1, 100);
 8001d54:	2664      	movs	r6, #100	; 0x64
void nRF24::writeRegister(unsigned int reg, unsigned int _data) {
 8001d56:	460d      	mov	r5, r1
 8001d58:	4617      	mov	r7, r2
 8001d5a:	b085      	sub	sp, #20
void nRF24::disableChip() {
  digitalWrite(ce_pin, LOW);
}

void nRF24::selectSlave(){
	digitalWrite(csn_pin, LOW);
 8001d5c:	7900      	ldrb	r0, [r0, #4]
 8001d5e:	2100      	movs	r1, #0
 8001d60:	f7ff feee 	bl	8001b40 <_Z12digitalWritehb>
  SPIsend(W_REGISTER | reg);
 8001d64:	f045 0520 	orr.w	r5, r5, #32
  HAL_SPI_TransmitReceive(globalHSPI, &data2Send, &buf2Receive, 1, 100);
 8001d68:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8001d6c:	f10d 020f 	add.w	r2, sp, #15
 8001d70:	f10d 010e 	add.w	r1, sp, #14
 8001d74:	9600      	str	r6, [sp, #0]
 8001d76:	2301      	movs	r3, #1
 8001d78:	f88d 500e 	strb.w	r5, [sp, #14]
 8001d7c:	f7ff fc2e 	bl	80015dc <HAL_SPI_TransmitReceive>
  SPIsend(_data);
 8001d80:	a904      	add	r1, sp, #16
 8001d82:	f801 7d03 	strb.w	r7, [r1, #-3]!
  HAL_SPI_TransmitReceive(globalHSPI, &data2Send, &buf2Receive, 1, 100);
 8001d86:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8001d8a:	f10d 020f 	add.w	r2, sp, #15
 8001d8e:	2301      	movs	r3, #1
 8001d90:	9600      	str	r6, [sp, #0]
 8001d92:	f7ff fc23 	bl	80015dc <HAL_SPI_TransmitReceive>
}

void nRF24::deselectSlave(){
	digitalWrite(csn_pin, HIGH);
 8001d96:	7920      	ldrb	r0, [r4, #4]
 8001d98:	2101      	movs	r1, #1
 8001d9a:	f7ff fed1 	bl	8001b40 <_Z12digitalWritehb>
}
 8001d9e:	b005      	add	sp, #20
 8001da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da2:	bf00      	nop

08001da4 <_ZN5nRF2422writeRegisterManyTimesEjPji>:
void nRF24::writeRegisterManyTimes(unsigned int reg, unsigned int* _data, int nBytes) {
 8001da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001da8:	4606      	mov	r6, r0
 8001daa:	460d      	mov	r5, r1
  HAL_SPI_TransmitReceive(globalHSPI, &data2Send, &buf2Receive, 1, 100);
 8001dac:	2764      	movs	r7, #100	; 0x64
void nRF24::writeRegisterManyTimes(unsigned int reg, unsigned int* _data, int nBytes) {
 8001dae:	461c      	mov	r4, r3
 8001db0:	b084      	sub	sp, #16
	digitalWrite(csn_pin, LOW);
 8001db2:	7900      	ldrb	r0, [r0, #4]
 8001db4:	2100      	movs	r1, #0
void nRF24::writeRegisterManyTimes(unsigned int reg, unsigned int* _data, int nBytes) {
 8001db6:	4690      	mov	r8, r2
	SPIsend(W_REGISTER | reg);
 8001db8:	f045 0520 	orr.w	r5, r5, #32
	digitalWrite(csn_pin, LOW);
 8001dbc:	f7ff fec0 	bl	8001b40 <_Z12digitalWritehb>
  HAL_SPI_TransmitReceive(globalHSPI, &data2Send, &buf2Receive, 1, 100);
 8001dc0:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
 8001dc4:	f10d 020f 	add.w	r2, sp, #15
 8001dc8:	9700      	str	r7, [sp, #0]
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f10d 010d 	add.w	r1, sp, #13
 8001dd0:	f88d 500d 	strb.w	r5, [sp, #13]
 8001dd4:	f7ff fc02 	bl	80015dc <HAL_SPI_TransmitReceive>
	for (i = nBytes - 1; i >= 0; i--)
 8001dd8:	2c00      	cmp	r4, #0
 8001dda:	dd11      	ble.n	8001e00 <_ZN5nRF2422writeRegisterManyTimesEjPji+0x5c>
 8001ddc:	eb08 0484 	add.w	r4, r8, r4, lsl #2
		SPIsend(_data[i]);
 8001de0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  HAL_SPI_TransmitReceive(globalHSPI, &data2Send, &buf2Receive, 1, 100);
 8001de4:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
 8001de8:	2301      	movs	r3, #1
 8001dea:	9700      	str	r7, [sp, #0]
 8001dec:	f10d 020f 	add.w	r2, sp, #15
 8001df0:	f10d 010e 	add.w	r1, sp, #14
		SPIsend(_data[i]);
 8001df4:	f88d 500e 	strb.w	r5, [sp, #14]
  HAL_SPI_TransmitReceive(globalHSPI, &data2Send, &buf2Receive, 1, 100);
 8001df8:	f7ff fbf0 	bl	80015dc <HAL_SPI_TransmitReceive>
	for (i = nBytes - 1; i >= 0; i--)
 8001dfc:	45a0      	cmp	r8, r4
 8001dfe:	d1ef      	bne.n	8001de0 <_ZN5nRF2422writeRegisterManyTimesEjPji+0x3c>
	digitalWrite(csn_pin, HIGH);
 8001e00:	7930      	ldrb	r0, [r6, #4]
 8001e02:	2101      	movs	r1, #1
 8001e04:	f7ff fe9c 	bl	8001b40 <_Z12digitalWritehb>
}
 8001e08:	b004      	add	sp, #16
 8001e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e0e:	bf00      	nop

08001e10 <_ZN5nRF2412readRegisterEj>:
unsigned int nRF24::readRegister(unsigned int reg) {
 8001e10:	b570      	push	{r4, r5, r6, lr}
 8001e12:	4604      	mov	r4, r0
  HAL_SPI_TransmitReceive(globalHSPI, &data2Send, &buf2Receive, 1, 100);
 8001e14:	2564      	movs	r5, #100	; 0x64
unsigned int nRF24::readRegister(unsigned int reg) {
 8001e16:	460e      	mov	r6, r1
 8001e18:	b084      	sub	sp, #16
	digitalWrite(csn_pin, LOW);
 8001e1a:	7900      	ldrb	r0, [r0, #4]
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	f7ff fe8f 	bl	8001b40 <_Z12digitalWritehb>
  HAL_SPI_TransmitReceive(globalHSPI, &data2Send, &buf2Receive, 1, 100);
 8001e22:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8001e26:	f10d 020f 	add.w	r2, sp, #15
 8001e2a:	f10d 010e 	add.w	r1, sp, #14
 8001e2e:	9500      	str	r5, [sp, #0]
 8001e30:	2301      	movs	r3, #1
  SPIsend(R_REGISTER | reg);
 8001e32:	f88d 600e 	strb.w	r6, [sp, #14]
  HAL_SPI_TransmitReceive(globalHSPI, &data2Send, &buf2Receive, 1, 100);
 8001e36:	f7ff fbd1 	bl	80015dc <HAL_SPI_TransmitReceive>
 8001e3a:	23ff      	movs	r3, #255	; 0xff
 8001e3c:	a904      	add	r1, sp, #16
 8001e3e:	f801 3d03 	strb.w	r3, [r1, #-3]!
 8001e42:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8001e46:	f10d 020f 	add.w	r2, sp, #15
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	9500      	str	r5, [sp, #0]
 8001e4e:	f7ff fbc5 	bl	80015dc <HAL_SPI_TransmitReceive>
	digitalWrite(csn_pin, HIGH);
 8001e52:	7920      	ldrb	r0, [r4, #4]
  return buf2Receive;
 8001e54:	f89d 400f 	ldrb.w	r4, [sp, #15]
	digitalWrite(csn_pin, HIGH);
 8001e58:	2101      	movs	r1, #1
 8001e5a:	f7ff fe71 	bl	8001b40 <_Z12digitalWritehb>
}
 8001e5e:	4620      	mov	r0, r4
 8001e60:	b004      	add	sp, #16
 8001e62:	bd70      	pop	{r4, r5, r6, pc}

08001e64 <_ZN5nRF2411enterRXmodeEv>:
void nRF24::enterRXmode() {
 8001e64:	b538      	push	{r3, r4, r5, lr}
 8001e66:	4604      	mov	r4, r0
  digitalWrite(ce_pin, LOW);
 8001e68:	2100      	movs	r1, #0
 8001e6a:	7800      	ldrb	r0, [r0, #0]
 8001e6c:	f7ff fe68 	bl	8001b40 <_Z12digitalWritehb>
	writeRegister(CONFIG, readRegister(CONFIG) | (1<<PWR_UP) | (1<<PRIM_RX));
 8001e70:	4620      	mov	r0, r4
 8001e72:	2100      	movs	r1, #0
 8001e74:	f7ff ffcc 	bl	8001e10 <_ZN5nRF2412readRegisterEj>
 8001e78:	2100      	movs	r1, #0
 8001e7a:	f040 0203 	orr.w	r2, r0, #3
 8001e7e:	4620      	mov	r0, r4
 8001e80:	f7ff ff66 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
	writeRegisterManyTimes(TX_ADDR, _defaultAddressPipe0, 5);
 8001e84:	f104 0508 	add.w	r5, r4, #8
	writeRegister(STATUS, (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT) );
 8001e88:	4620      	mov	r0, r4
 8001e8a:	2270      	movs	r2, #112	; 0x70
 8001e8c:	2107      	movs	r1, #7
 8001e8e:	f7ff ff5f 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
	writeRegisterManyTimes(TX_ADDR, _defaultAddressPipe0, 5);
 8001e92:	462a      	mov	r2, r5
 8001e94:	4620      	mov	r0, r4
 8001e96:	2305      	movs	r3, #5
 8001e98:	2110      	movs	r1, #16
 8001e9a:	f7ff ff83 	bl	8001da4 <_ZN5nRF2422writeRegisterManyTimesEjPji>
	writeRegisterManyTimes(RX_ADDR_P0, _defaultAddressPipe0, 5);
 8001e9e:	2305      	movs	r3, #5
 8001ea0:	462a      	mov	r2, r5
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	210a      	movs	r1, #10
 8001ea6:	f7ff ff7d 	bl	8001da4 <_ZN5nRF2422writeRegisterManyTimesEjPji>
	writeRegister(RX_PW_P0, pipePacakgeSize[0]);
 8001eaa:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
 8001eae:	4620      	mov	r0, r4
 8001eb0:	2111      	movs	r1, #17
 8001eb2:	f7ff ff4d 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
	writeRegister(FLUSH_TX, NOP);
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	22ff      	movs	r2, #255	; 0xff
 8001eba:	21e1      	movs	r1, #225	; 0xe1
 8001ebc:	f7ff ff48 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
	writeRegister(FLUSH_RX, NOP);
 8001ec0:	4620      	mov	r0, r4
 8001ec2:	22ff      	movs	r2, #255	; 0xff
 8001ec4:	21e2      	movs	r1, #226	; 0xe2
 8001ec6:	f7ff ff43 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  digitalWrite(ce_pin, HIGH);
 8001eca:	7820      	ldrb	r0, [r4, #0]
 8001ecc:	2101      	movs	r1, #1
 8001ece:	f7ff fe37 	bl	8001b40 <_Z12digitalWritehb>
	microDelay(1);
 8001ed2:	4620      	mov	r0, r4
}
 8001ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	microDelay(1);
 8001ed8:	2101      	movs	r1, #1
 8001eda:	f7ff be0f 	b.w	8001afc <_ZN5nRF2410microDelayEi>
 8001ede:	bf00      	nop

08001ee0 <_ZN5nRF24C1EP19__SPI_HandleTypeDefiih>:
nRF24::nRF24(SPI_HandleTypeDef *HSPI, int ce, int csn, uint8_t channel) {
 8001ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ee4:	b085      	sub	sp, #20
 8001ee6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8001eea:	2312      	movs	r3, #18
 8001eec:	6483      	str	r3, [r0, #72]	; 0x48
 8001eee:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001ef2:	2600      	movs	r6, #0
 8001ef4:	2510      	movs	r5, #16
 8001ef6:	2711      	movs	r7, #17
 8001ef8:	9301      	str	r3, [sp, #4]
 8001efa:	2313      	movs	r3, #19
 8001efc:	4604      	mov	r4, r0
 8001efe:	f100 0908 	add.w	r9, r0, #8
 8001f02:	6603      	str	r3, [r0, #96]	; 0x60
 8001f04:	9100      	str	r1, [sp, #0]
 8001f06:	f100 0a20 	add.w	sl, r0, #32
 8001f0a:	61c6      	str	r6, [r0, #28]
 8001f0c:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8001f10:	e9c0 5504 	strd	r5, r5, [r0, #16]
 8001f14:	6185      	str	r5, [r0, #24]
 8001f16:	6346      	str	r6, [r0, #52]	; 0x34
 8001f18:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
 8001f1c:	62c5      	str	r5, [r0, #44]	; 0x2c
 8001f1e:	6207      	str	r7, [r0, #32]
 8001f20:	6307      	str	r7, [r0, #48]	; 0x30
 8001f22:	64c6      	str	r6, [r0, #76]	; 0x4c
 8001f24:	e9c0 750e 	strd	r7, r5, [r0, #56]	; 0x38
 8001f28:	e9c0 5510 	strd	r5, r5, [r0, #64]	; 0x40
 8001f2c:	6646      	str	r6, [r0, #100]	; 0x64
 8001f2e:	e9c0 7514 	strd	r7, r5, [r0, #80]	; 0x50
 8001f32:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
 8001f36:	67c6      	str	r6, [r0, #124]	; 0x7c
 8001f38:	e9c0 751a 	strd	r7, r5, [r0, #104]	; 0x68
 8001f3c:	e9c0 551c 	strd	r5, r5, [r0, #112]	; 0x70
 8001f40:	2014      	movs	r0, #20
 8001f42:	f8df c214 	ldr.w	ip, [pc, #532]	; 8002158 <_ZN5nRF24C1EP19__SPI_HandleTypeDefiih+0x278>
 8001f46:	f04f 0b01 	mov.w	fp, #1
 8001f4a:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8001f4e:	67a0      	str	r0, [r4, #120]	; 0x78
 8001f50:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8001f54:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
 8001f58:	2015      	movs	r0, #21
 8001f5a:	f10c 0c08 	add.w	ip, ip, #8
 8001f5e:	f8a4 10a0 	strh.w	r1, [r4, #160]	; 0xa0
 8001f62:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
 8001f66:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
 8001f6a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8001f6e:	e9c4 7520 	strd	r7, r5, [r4, #128]	; 0x80
 8001f72:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
 8001f76:	f8a4 10a8 	strh.w	r1, [r4, #168]	; 0xa8
 8001f7a:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
 8001f7e:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 8001f82:	f884 60b1 	strb.w	r6, [r4, #177]	; 0xb1
 8001f86:	f884 60b2 	strb.w	r6, [r4, #178]	; 0xb2
 8001f8a:	f884 60b3 	strb.w	r6, [r4, #179]	; 0xb3
 8001f8e:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
 8001f92:	f884 60b5 	strb.w	r6, [r4, #181]	; 0xb5
 8001f96:	f884 80a3 	strb.w	r8, [r4, #163]	; 0xa3
 8001f9a:	f884 b0b0 	strb.w	fp, [r4, #176]	; 0xb0
  RF_delay_init();
 8001f9e:	f7ff fd87 	bl	8001ab0 <_Z13RF_delay_initv>
  csn_pin = csn;
 8001fa2:	9b02      	ldr	r3, [sp, #8]
  ce_pin = ce;
 8001fa4:	9a03      	ldr	r2, [sp, #12]
  globalHSPI = HSPI;
 8001fa6:	9900      	ldr	r1, [sp, #0]
  csn_pin = csn;
 8001fa8:	6063      	str	r3, [r4, #4]
  ce_pin = ce;
 8001faa:	6022      	str	r2, [r4, #0]
  digitalWrite(ce_pin, LOW);
 8001fac:	b2d0      	uxtb	r0, r2
  globalHSPI = HSPI;
 8001fae:	f8c4 10ac 	str.w	r1, [r4, #172]	; 0xac
  digitalWrite(ce_pin, LOW);
 8001fb2:	4631      	mov	r1, r6
 8001fb4:	f7ff fdc4 	bl	8001b40 <_Z12digitalWritehb>
	digitalWrite(csn_pin, HIGH);
 8001fb8:	4659      	mov	r1, fp
 8001fba:	7920      	ldrb	r0, [r4, #4]
 8001fbc:	f7ff fdc0 	bl	8001b40 <_Z12digitalWritehb>
	writeRegister(SETUP_RETR, (((delay/250)-1) << ARD) | retr);
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc6:	2104      	movs	r1, #4
 8001fc8:	f7ff fec2 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  aux = readRegister(RF_SETUP);   //read current value
 8001fcc:	4620      	mov	r0, r4
 8001fce:	2106      	movs	r1, #6
 8001fd0:	f7ff ff1e 	bl	8001e10 <_ZN5nRF2412readRegisterEj>
  writeRegister( RF_SETUP, aux ); //write register
 8001fd4:	2106      	movs	r1, #6
 8001fd6:	ea40 0201 	orr.w	r2, r0, r1
 8001fda:	4620      	mov	r0, r4
 8001fdc:	f7ff feb8 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  aux = readRegister(RF_SETUP);
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	2106      	movs	r1, #6
 8001fe4:	f7ff ff14 	bl	8001e10 <_ZN5nRF2412readRegisterEj>
  aux &= ~(1 << RF_DR_LOW);        //
 8001fe8:	f020 0228 	bic.w	r2, r0, #40	; 0x28
  writeRegister( RF_SETUP, aux );
 8001fec:	f042 0208 	orr.w	r2, r2, #8
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	2106      	movs	r1, #6
 8001ff4:	f7ff feac 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  writeRegister(DYNPD, 0);
 8001ff8:	4632      	mov	r2, r6
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	211c      	movs	r1, #28
 8001ffe:	f7ff fea7 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  writeRegister(STATUS, 1 << RX_DR | 1 << TX_DS | 1 << MAX_RT);
 8002002:	4620      	mov	r0, r4
 8002004:	2270      	movs	r2, #112	; 0x70
 8002006:	2107      	movs	r1, #7
 8002008:	f7ff fea2 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  aux = readRegister(CONFIG) | 1 << MASK_TX_DS | 1 << MASK_MAX_RT | 1 << MASK_RX_DR; // Removida tamb�m a interrup��o de RX data ready
 800200c:	4631      	mov	r1, r6
 800200e:	4620      	mov	r0, r4
 8002010:	f7ff fefe 	bl	8001e10 <_ZN5nRF2412readRegisterEj>
  writeRegister(CONFIG, aux) ;
 8002014:	4631      	mov	r1, r6
 8002016:	f040 0270 	orr.w	r2, r0, #112	; 0x70
 800201a:	4620      	mov	r0, r4
 800201c:	f7ff fe98 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  aux = readRegister(CONFIG) | 1 << CRCO | 1 << EN_CRC; //CRCO define 2 bytes of CRC
 8002020:	4631      	mov	r1, r6
 8002022:	4620      	mov	r0, r4
 8002024:	f7ff fef4 	bl	8001e10 <_ZN5nRF2412readRegisterEj>
  writeRegister(CONFIG, aux) ;
 8002028:	4631      	mov	r1, r6
 800202a:	f040 020c 	orr.w	r2, r0, #12
 800202e:	4620      	mov	r0, r4
 8002030:	f7ff fe8e 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  writeRegister(RF_CH, channel < 125 ? channel : 125);
 8002034:	9a01      	ldr	r2, [sp, #4]
 8002036:	4620      	mov	r0, r4
 8002038:	2a7d      	cmp	r2, #125	; 0x7d
 800203a:	bf28      	it	cs
 800203c:	227d      	movcs	r2, #125	; 0x7d
 800203e:	2105      	movs	r1, #5
 8002040:	f7ff fe86 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  writeRegister(EN_RXADDR, pipesActives[ERX_P0] << ERX_P0 | pipesActives[ERX_P1] << ERX_P1 | pipesActives[ERX_P2] << ERX_P2 | pipesActives[ERX_P3] << ERX_P3 | pipesActives[ERX_P4] << ERX_P4 | pipesActives[ERX_P5] << ERX_P5);
 8002044:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
 8002048:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
 800204c:	0092      	lsls	r2, r2, #2
 800204e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8002052:	f894 109f 	ldrb.w	r1, [r4, #159]	; 0x9f
 8002056:	f894 c0a0 	ldrb.w	ip, [r4, #160]	; 0xa0
 800205a:	ea42 020b 	orr.w	r2, r2, fp
 800205e:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 8002062:	ea42 01c1 	orr.w	r1, r2, r1, lsl #3
 8002066:	ea41 120c 	orr.w	r2, r1, ip, lsl #4
 800206a:	ea42 1240 	orr.w	r2, r2, r0, lsl #5
  pipesActives[0] = true;
 800206e:	f884 b09c 	strb.w	fp, [r4, #156]	; 0x9c
  writeRegister(EN_RXADDR, pipesActives[ERX_P0] << ERX_P0 | pipesActives[ERX_P1] << ERX_P1 | pipesActives[ERX_P2] << ERX_P2 | pipesActives[ERX_P3] << ERX_P3 | pipesActives[ERX_P4] << ERX_P4 | pipesActives[ERX_P5] << ERX_P5);
 8002072:	4620      	mov	r0, r4
 8002074:	2102      	movs	r1, #2
 8002076:	f7ff fe6b 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  writeRegisterManyTimes(TX_ADDR, _defaultAddressPipe0, 5);
 800207a:	4629      	mov	r1, r5
 800207c:	464a      	mov	r2, r9
 800207e:	4620      	mov	r0, r4
 8002080:	2305      	movs	r3, #5
 8002082:	f7ff fe8f 	bl	8001da4 <_ZN5nRF2422writeRegisterManyTimesEjPji>
  writeRegisterManyTimes(RX_ADDR_P0, address, 5);
 8002086:	464a      	mov	r2, r9
 8002088:	4620      	mov	r0, r4
 800208a:	2305      	movs	r3, #5
 800208c:	210a      	movs	r1, #10
 800208e:	f7ff fe89 	bl	8001da4 <_ZN5nRF2422writeRegisterManyTimesEjPji>
  writeRegister(RX_PW_P0, pipePacakgeSize[0]);
 8002092:	4639      	mov	r1, r7
 8002094:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
 8002098:	4620      	mov	r0, r4
 800209a:	f7ff fe59 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  writeRegisterManyTimes(RX_ADDR_P1, address, 5);
 800209e:	2305      	movs	r3, #5
 80020a0:	4652      	mov	r2, sl
 80020a2:	4620      	mov	r0, r4
 80020a4:	210b      	movs	r1, #11
 80020a6:	f7ff fe7d 	bl	8001da4 <_ZN5nRF2422writeRegisterManyTimesEjPji>
  writeRegister(RX_PW_P1, pipePacakgeSize[1]);
 80020aa:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 80020ae:	4620      	mov	r0, r4
 80020b0:	2112      	movs	r1, #18
 80020b2:	f7ff fe4d 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  writeRegister(RX_ADDR_P2, address[4]);
 80020b6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80020b8:	4620      	mov	r0, r4
 80020ba:	210c      	movs	r1, #12
 80020bc:	f7ff fe48 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  writeRegister(RX_PW_P2, pipePacakgeSize[2]);
 80020c0:	f894 20a6 	ldrb.w	r2, [r4, #166]	; 0xa6
 80020c4:	4620      	mov	r0, r4
 80020c6:	2113      	movs	r1, #19
 80020c8:	f7ff fe42 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  writeRegister(RX_ADDR_P3, address[4]);
 80020cc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80020ce:	4620      	mov	r0, r4
 80020d0:	210d      	movs	r1, #13
 80020d2:	f7ff fe3d 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  writeRegister(RX_PW_P3, pipePacakgeSize[3]);
 80020d6:	f894 20a7 	ldrb.w	r2, [r4, #167]	; 0xa7
 80020da:	4620      	mov	r0, r4
 80020dc:	2114      	movs	r1, #20
 80020de:	f7ff fe37 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  writeRegister(RX_ADDR_P4, address[4]);
 80020e2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80020e4:	4620      	mov	r0, r4
 80020e6:	210e      	movs	r1, #14
 80020e8:	f7ff fe32 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  writeRegister(RX_PW_P4, pipePacakgeSize[4]);
 80020ec:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
 80020f0:	4620      	mov	r0, r4
 80020f2:	2115      	movs	r1, #21
 80020f4:	f7ff fe2c 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  writeRegister(RX_ADDR_P5, address[4]);
 80020f8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80020fc:	4620      	mov	r0, r4
 80020fe:	210f      	movs	r1, #15
 8002100:	f7ff fe26 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  writeRegister(RX_PW_P5, pipePacakgeSize[5]);
 8002104:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
 8002108:	4620      	mov	r0, r4
 800210a:	2116      	movs	r1, #22
 800210c:	f7ff fe20 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  digitalWrite(ce_pin, LOW);
 8002110:	4631      	mov	r1, r6
 8002112:	7820      	ldrb	r0, [r4, #0]
 8002114:	f7ff fd14 	bl	8001b40 <_Z12digitalWritehb>
  writeRegister(FLUSH_TX, NOP);
 8002118:	4642      	mov	r2, r8
 800211a:	4620      	mov	r0, r4
 800211c:	21e1      	movs	r1, #225	; 0xe1
 800211e:	f7ff fe17 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  writeRegister(FLUSH_RX, NOP);
 8002122:	4642      	mov	r2, r8
 8002124:	4620      	mov	r0, r4
 8002126:	21e2      	movs	r1, #226	; 0xe2
 8002128:	f7ff fe12 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  writeRegister(FEATURE, readRegister(FEATURE) | 1<<EN_DPL | 1<<EN_ACK_PAY);
 800212c:	4620      	mov	r0, r4
 800212e:	211d      	movs	r1, #29
 8002130:	f7ff fe6e 	bl	8001e10 <_ZN5nRF2412readRegisterEj>
 8002134:	211d      	movs	r1, #29
 8002136:	f040 0206 	orr.w	r2, r0, #6
 800213a:	4620      	mov	r0, r4
 800213c:	f7ff fe08 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  writeRegister(DYNPD, 0x3F);
 8002140:	4620      	mov	r0, r4
 8002142:	223f      	movs	r2, #63	; 0x3f
 8002144:	211c      	movs	r1, #28
 8002146:	f7ff fe03 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  enterRXmode();
 800214a:	4620      	mov	r0, r4
 800214c:	f7ff fe8a 	bl	8001e64 <_ZN5nRF2411enterRXmodeEv>
}
 8002150:	4620      	mov	r0, r4
 8002152:	b005      	add	sp, #20
 8002154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002158:	08002b48 	.word	0x08002b48

0800215c <_ZN5nRF2410enablePipeEj>:
  pipesActives[_pipe] = true;
 800215c:	2301      	movs	r3, #1
 800215e:	4401      	add	r1, r0
void nRF24::enablePipe(unsigned int _pipe) {
 8002160:	b410      	push	{r4}
  pipesActives[_pipe] = true;
 8002162:	f881 309c 	strb.w	r3, [r1, #156]	; 0x9c
  writeRegister(EN_RXADDR, pipesActives[ERX_P0] << ERX_P0 | pipesActives[ERX_P1] << ERX_P1 | pipesActives[ERX_P2] << ERX_P2 | pipesActives[ERX_P3] << ERX_P3 | pipesActives[ERX_P4] << ERX_P4 | pipesActives[ERX_P5] << ERX_P5);
 8002166:	f890 309e 	ldrb.w	r3, [r0, #158]	; 0x9e
 800216a:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
 800216e:	f890 109c 	ldrb.w	r1, [r0, #156]	; 0x9c
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8002178:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
 800217c:	430b      	orrs	r3, r1
 800217e:	f890 10a0 	ldrb.w	r1, [r0, #160]	; 0xa0
 8002182:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002186:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
 800218a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800218e:	ea43 1242 	orr.w	r2, r3, r2, lsl #5
 8002192:	2102      	movs	r1, #2
}
 8002194:	bc10      	pop	{r4}
  writeRegister(EN_RXADDR, pipesActives[ERX_P0] << ERX_P0 | pipesActives[ERX_P1] << ERX_P1 | pipesActives[ERX_P2] << ERX_P2 | pipesActives[ERX_P3] << ERX_P3 | pipesActives[ERX_P4] << ERX_P4 | pipesActives[ERX_P5] << ERX_P5);
 8002196:	f7ff bddb 	b.w	8001d50 <_ZN5nRF2413writeRegisterEjj>
 800219a:	bf00      	nop

0800219c <_ZN5nRF2411enterTXmodeEj>:
  switch (_pipe) {
 800219c:	1e4b      	subs	r3, r1, #1
void nRF24::enterTXmode(unsigned int _pipe) {
 800219e:	b570      	push	{r4, r5, r6, lr}
 80021a0:	460d      	mov	r5, r1
 80021a2:	4604      	mov	r4, r0
  switch (_pipe) {
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d804      	bhi.n	80021b2 <_ZN5nRF2411enterTXmodeEj+0x16>
 80021a8:	e8df f003 	tbb	[pc, r3]
 80021ac:	4b5d5751 	.word	0x4b5d5751
 80021b0:	6b          	.byte	0x6b
 80021b1:	00          	.byte	0x00
      cachePipeAddress = 0;
 80021b2:	2300      	movs	r3, #0
      address = _defaultAddressPipe0;
 80021b4:	f100 0608 	add.w	r6, r0, #8
      cachePipeAddress = 0;
 80021b8:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
  digitalWrite(ce_pin, LOW);
 80021bc:	2100      	movs	r1, #0
 80021be:	7820      	ldrb	r0, [r4, #0]
 80021c0:	f7ff fcbe 	bl	8001b40 <_Z12digitalWritehb>
  if (!pipesActives[_pipe])
 80021c4:	1963      	adds	r3, r4, r5
 80021c6:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80021ca:	b3ab      	cbz	r3, 8002238 <_ZN5nRF2411enterTXmodeEj+0x9c>
  writeRegister(CONFIG, 0x0E);
 80021cc:	220e      	movs	r2, #14
 80021ce:	2100      	movs	r1, #0
 80021d0:	4620      	mov	r0, r4
 80021d2:	f7ff fdbd 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
    writeRegister(STATUS, (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT) );
 80021d6:	2270      	movs	r2, #112	; 0x70
 80021d8:	2107      	movs	r1, #7
 80021da:	4620      	mov	r0, r4
 80021dc:	f7ff fdb8 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  writeRegisterManyTimes(TX_ADDR, address, 5);
 80021e0:	2305      	movs	r3, #5
 80021e2:	4632      	mov	r2, r6
 80021e4:	2110      	movs	r1, #16
 80021e6:	4620      	mov	r0, r4
 80021e8:	f7ff fddc 	bl	8001da4 <_ZN5nRF2422writeRegisterManyTimesEjPji>
  writeRegisterManyTimes(RX_ADDR_P0, address, 5);
 80021ec:	4632      	mov	r2, r6
 80021ee:	2305      	movs	r3, #5
 80021f0:	210a      	movs	r1, #10
 80021f2:	4620      	mov	r0, r4
 80021f4:	f7ff fdd6 	bl	8001da4 <_ZN5nRF2422writeRegisterManyTimesEjPji>
  writeRegister(RX_PW_P0, pipePacakgeSize[cachePipeAddress]);
 80021f8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80021fc:	2111      	movs	r1, #17
 80021fe:	4423      	add	r3, r4
 8002200:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 8002204:	4620      	mov	r0, r4
 8002206:	f7ff fda3 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  if(_pipe ==1){
 800220a:	2d01      	cmp	r5, #1
 800220c:	d031      	beq.n	8002272 <_ZN5nRF2411enterTXmodeEj+0xd6>
	else if(_pipe >= 2 && _pipe <=5){
 800220e:	1eab      	subs	r3, r5, #2
 8002210:	2b03      	cmp	r3, #3
 8002212:	d805      	bhi.n	8002220 <_ZN5nRF2411enterTXmodeEj+0x84>
	  writeRegister(RX_ADDR_P0 + _pipe, _defaultAddressPipe0[4]);
 8002214:	f105 010a 	add.w	r1, r5, #10
 8002218:	69a2      	ldr	r2, [r4, #24]
 800221a:	4620      	mov	r0, r4
 800221c:	f7ff fd98 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  writeRegister(FLUSH_TX, NOP);
 8002220:	4620      	mov	r0, r4
 8002222:	22ff      	movs	r2, #255	; 0xff
 8002224:	21e1      	movs	r1, #225	; 0xe1
 8002226:	f7ff fd93 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
  writeRegister(FLUSH_RX, NOP);
 800222a:	4620      	mov	r0, r4
}
 800222c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  writeRegister(FLUSH_RX, NOP);
 8002230:	22ff      	movs	r2, #255	; 0xff
 8002232:	21e2      	movs	r1, #226	; 0xe2
 8002234:	f7ff bd8c 	b.w	8001d50 <_ZN5nRF2413writeRegisterEjj>
    enablePipe(_pipe);
 8002238:	4629      	mov	r1, r5
 800223a:	4620      	mov	r0, r4
 800223c:	f7ff ff8e 	bl	800215c <_ZN5nRF2410enablePipeEj>
 8002240:	e7c4      	b.n	80021cc <_ZN5nRF2411enterTXmodeEj+0x30>
      cachePipeAddress = 4;
 8002242:	2304      	movs	r3, #4
      address = _defaultAddressPipe4;
 8002244:	f100 0668 	add.w	r6, r0, #104	; 0x68
      cachePipeAddress = 4;
 8002248:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
      break;
 800224c:	e7b6      	b.n	80021bc <_ZN5nRF2411enterTXmodeEj+0x20>
      cachePipeAddress = 1;
 800224e:	2301      	movs	r3, #1
      address = _defaultAddressPipe1;
 8002250:	f100 0620 	add.w	r6, r0, #32
      cachePipeAddress = 1;
 8002254:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
      break;
 8002258:	e7b0      	b.n	80021bc <_ZN5nRF2411enterTXmodeEj+0x20>
      cachePipeAddress = 2;
 800225a:	2302      	movs	r3, #2
      address = _defaultAddressPipe2;
 800225c:	f100 0638 	add.w	r6, r0, #56	; 0x38
      cachePipeAddress = 2;
 8002260:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
      break;
 8002264:	e7aa      	b.n	80021bc <_ZN5nRF2411enterTXmodeEj+0x20>
      cachePipeAddress = 3;
 8002266:	2303      	movs	r3, #3
      address = _defaultAddressPipe3;
 8002268:	f100 0650 	add.w	r6, r0, #80	; 0x50
      cachePipeAddress = 3;
 800226c:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
      break;
 8002270:	e7a4      	b.n	80021bc <_ZN5nRF2411enterTXmodeEj+0x20>
	  writeRegisterManyTimes(RX_ADDR_P0 + _pipe, _defaultAddressPipe0, 5);
 8002272:	2305      	movs	r3, #5
 8002274:	f104 0208 	add.w	r2, r4, #8
 8002278:	210b      	movs	r1, #11
 800227a:	4620      	mov	r0, r4
 800227c:	f7ff fd92 	bl	8001da4 <_ZN5nRF2422writeRegisterManyTimesEjPji>
 8002280:	e7ce      	b.n	8002220 <_ZN5nRF2411enterTXmodeEj+0x84>
      cachePipeAddress = 5;
 8002282:	2305      	movs	r3, #5
      address = _defaultAddressPipe5;
 8002284:	f100 0680 	add.w	r6, r0, #128	; 0x80
      cachePipeAddress = 5;
 8002288:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
      break;
 800228c:	e796      	b.n	80021bc <_ZN5nRF2411enterTXmodeEj+0x20>
 800228e:	bf00      	nop

08002290 <_ZN5nRF247msgSizeEv>:
unsigned int nRF24::msgSize() {
 8002290:	b510      	push	{r4, lr}
	if ((~readRegister(FIFO_STATUS)) & (1<<RX_EMPTY)) {
 8002292:	2117      	movs	r1, #23
unsigned int nRF24::msgSize() {
 8002294:	4604      	mov	r4, r0
	if ((~readRegister(FIFO_STATUS)) & (1<<RX_EMPTY)) {
 8002296:	f7ff fdbb 	bl	8001e10 <_ZN5nRF2412readRegisterEj>
 800229a:	07c3      	lsls	r3, r0, #31
 800229c:	d501      	bpl.n	80022a2 <_ZN5nRF247msgSizeEv+0x12>
}
 800229e:	2000      	movs	r0, #0
 80022a0:	bd10      	pop	{r4, pc}
		return readRegister(R_RX_PL_WID);
 80022a2:	4620      	mov	r0, r4
}
 80022a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return readRegister(R_RX_PL_WID);
 80022a8:	2160      	movs	r1, #96	; 0x60
 80022aa:	f7ff bdb1 	b.w	8001e10 <_ZN5nRF2412readRegisterEj>
 80022ae:	bf00      	nop

080022b0 <_ZN5nRF244sendEPKcjj>:
uint8_t nRF24::send(const char* _data, unsigned int _size, unsigned int _pipe) {
 80022b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022b4:	4616      	mov	r6, r2
  if(!inTxMode){
 80022b6:	f890 20a2 	ldrb.w	r2, [r0, #162]	; 0xa2
 80022ba:	2e20      	cmp	r6, #32
 80022bc:	46b0      	mov	r8, r6
uint8_t nRF24::send(const char* _data, unsigned int _size, unsigned int _pipe) {
 80022be:	b084      	sub	sp, #16
 80022c0:	4605      	mov	r5, r0
 80022c2:	460c      	mov	r4, r1
 80022c4:	bf28      	it	cs
 80022c6:	f04f 0820 	movcs.w	r8, #32
  if(!inTxMode){
 80022ca:	2a00      	cmp	r2, #0
 80022cc:	d04e      	beq.n	800236c <_ZN5nRF244sendEPKcjj+0xbc>
	  if(usingPipe != _pipe){
 80022ce:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d144      	bne.n	8002360 <_ZN5nRF244sendEPKcjj+0xb0>
	  microDelay(6);
 80022d6:	2106      	movs	r1, #6
 80022d8:	4628      	mov	r0, r5
 80022da:	f7ff fc0f 	bl	8001afc <_ZN5nRF2410microDelayEi>
      writeRegister(STATUS, (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT) );
 80022de:	2270      	movs	r2, #112	; 0x70
 80022e0:	2107      	movs	r1, #7
 80022e2:	4628      	mov	r0, r5
 80022e4:	f7ff fd34 	bl	8001d50 <_ZN5nRF2413writeRegisterEjj>
	digitalWrite(csn_pin, LOW);
 80022e8:	2100      	movs	r1, #0
 80022ea:	7928      	ldrb	r0, [r5, #4]
  HAL_SPI_TransmitReceive(globalHSPI, &data2Send, &buf2Receive, 1, 100);
 80022ec:	2764      	movs	r7, #100	; 0x64
	digitalWrite(csn_pin, LOW);
 80022ee:	f7ff fc27 	bl	8001b40 <_Z12digitalWritehb>
 80022f2:	f04f 0ca0 	mov.w	ip, #160	; 0xa0
  HAL_SPI_TransmitReceive(globalHSPI, &data2Send, &buf2Receive, 1, 100);
 80022f6:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
 80022fa:	f10d 020f 	add.w	r2, sp, #15
 80022fe:	9700      	str	r7, [sp, #0]
 8002300:	2301      	movs	r3, #1
 8002302:	f10d 010d 	add.w	r1, sp, #13
 8002306:	f88d c00d 	strb.w	ip, [sp, #13]
 800230a:	f7ff f967 	bl	80015dc <HAL_SPI_TransmitReceive>
  while (_size--)
 800230e:	b186      	cbz	r6, 8002332 <_ZN5nRF244sendEPKcjj+0x82>
 8002310:	44a0      	add	r8, r4
 8002312:	f814 6b01 	ldrb.w	r6, [r4], #1
  HAL_SPI_TransmitReceive(globalHSPI, &data2Send, &buf2Receive, 1, 100);
 8002316:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
 800231a:	2301      	movs	r3, #1
 800231c:	9700      	str	r7, [sp, #0]
 800231e:	f10d 020f 	add.w	r2, sp, #15
 8002322:	f10d 010e 	add.w	r1, sp, #14
 8002326:	f88d 600e 	strb.w	r6, [sp, #14]
 800232a:	f7ff f957 	bl	80015dc <HAL_SPI_TransmitReceive>
  while (_size--)
 800232e:	4544      	cmp	r4, r8
 8002330:	d1ef      	bne.n	8002312 <_ZN5nRF244sendEPKcjj+0x62>
	digitalWrite(csn_pin, HIGH);
 8002332:	7928      	ldrb	r0, [r5, #4]
 8002334:	2101      	movs	r1, #1
 8002336:	f7ff fc03 	bl	8001b40 <_Z12digitalWritehb>
  digitalWrite(ce_pin, HIGH);
 800233a:	7828      	ldrb	r0, [r5, #0]
 800233c:	2101      	movs	r1, #1
 800233e:	f7ff fbff 	bl	8001b40 <_Z12digitalWritehb>
  microDelay(10);	//	Alterado de 30 para 10
 8002342:	4628      	mov	r0, r5
 8002344:	210a      	movs	r1, #10
 8002346:	f7ff fbd9 	bl	8001afc <_ZN5nRF2410microDelayEi>
  digitalWrite(ce_pin, LOW);
 800234a:	2100      	movs	r1, #0
 800234c:	7828      	ldrb	r0, [r5, #0]
 800234e:	f7ff fbf7 	bl	8001b40 <_Z12digitalWritehb>
  return msgSize();
 8002352:	4628      	mov	r0, r5
 8002354:	f7ff ff9c 	bl	8002290 <_ZN5nRF247msgSizeEv>
}
 8002358:	b2c0      	uxtb	r0, r0
 800235a:	b004      	add	sp, #16
 800235c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		  usingPipe = _pipe;
 8002360:	f880 30a3 	strb.w	r3, [r0, #163]	; 0xa3
		  enterTXmode(_pipe);
 8002364:	4619      	mov	r1, r3
 8002366:	f7ff ff19 	bl	800219c <_ZN5nRF2411enterTXmodeEj>
 800236a:	e7b4      	b.n	80022d6 <_ZN5nRF244sendEPKcjj+0x26>
	  inTxMode = true;
 800236c:	2201      	movs	r2, #1
	  usingPipe = _pipe;
 800236e:	f880 30a3 	strb.w	r3, [r0, #163]	; 0xa3
	  enterTXmode(_pipe);
 8002372:	4619      	mov	r1, r3
	  inTxMode = true;
 8002374:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
	  enterTXmode(_pipe);
 8002378:	f7ff ff10 	bl	800219c <_ZN5nRF2411enterTXmodeEj>
 800237c:	e7b4      	b.n	80022e8 <_ZN5nRF244sendEPKcjj+0x38>
 800237e:	bf00      	nop

08002380 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002380:	b530      	push	{r4, r5, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002382:	2201      	movs	r2, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002384:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002386:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002388:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800238c:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
{
 8002390:	b095      	sub	sp, #84	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002392:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002394:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002396:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002398:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800239a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800239c:	9113      	str	r1, [sp, #76]	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800239e:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023a0:	9405      	str	r4, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023a2:	9401      	str	r4, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023a4:	940d      	str	r4, [sp, #52]	; 0x34
 80023a6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023aa:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80023ae:	e9cd 4408 	strd	r4, r4, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023b2:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80023b6:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023b8:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023ba:	f7fe fc73 	bl	8000ca4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023be:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023c4:	4629      	mov	r1, r5
 80023c6:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023c8:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023ca:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023cc:	e9cd 5406 	strd	r5, r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023d0:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023d2:	f7fe fe85 	bl	80010e0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80023d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023da:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80023dc:	9501      	str	r5, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80023de:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023e0:	f7fe ff30 	bl	8001244 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80023e4:	b015      	add	sp, #84	; 0x54
 80023e6:	bd30      	pop	{r4, r5, pc}

080023e8 <main>:
{
 80023e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ec:	2600      	movs	r6, #0

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|idleLed_Pin|sendLed_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SS_Pin */
  GPIO_InitStruct.Pin = SS_Pin;
 80023ee:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f2:	2701      	movs	r7, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f4:	f04f 0a02 	mov.w	sl, #2
{
 80023f8:	b0b9      	sub	sp, #228	; 0xe4
  HAL_Init();
 80023fa:	f7fd fec9 	bl	8000190 <HAL_Init>
  SystemClock_Config();
 80023fe:	f7ff ffbf 	bl	8002380 <_Z18SystemClock_Configv>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002402:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
 8002406:	e9cd 660c 	strd	r6, r6, [sp, #48]	; 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800240a:	4cd0      	ldr	r4, [pc, #832]	; (800274c <main+0x364>)
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET);
 800240c:	4632      	mov	r2, r6
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800240e:	69a1      	ldr	r1, [r4, #24]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002410:	f44f 7980 	mov.w	r9, #256	; 0x100
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002414:	f041 0120 	orr.w	r1, r1, #32
 8002418:	61a1      	str	r1, [r4, #24]
 800241a:	69a0      	ldr	r0, [r4, #24]
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET);
 800241c:	4641      	mov	r1, r8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800241e:	f000 0020 	and.w	r0, r0, #32
 8002422:	9004      	str	r0, [sp, #16]
 8002424:	9804      	ldr	r0, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002426:	69a5      	ldr	r5, [r4, #24]
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET);
 8002428:	48c9      	ldr	r0, [pc, #804]	; (8002750 <main+0x368>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800242a:	f045 0504 	orr.w	r5, r5, #4
 800242e:	61a5      	str	r5, [r4, #24]
 8002430:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002434:	f44f 7500 	mov.w	r5, #512	; 0x200
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002438:	f00c 0c04 	and.w	ip, ip, #4
 800243c:	f8cd c014 	str.w	ip, [sp, #20]
 8002440:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002442:	f8d4 c018 	ldr.w	ip, [r4, #24]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002446:	f04f 0b80 	mov.w	fp, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800244a:	f04c 0c08 	orr.w	ip, ip, #8
 800244e:	f8c4 c018 	str.w	ip, [r4, #24]
 8002452:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8002456:	f00c 0c08 	and.w	ip, ip, #8
 800245a:	f8cd c018 	str.w	ip, [sp, #24]
 800245e:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET);
 8002460:	f7fe fc18 	bl	8000c94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, CE_Pin|idleLed_Pin|sendLed_Pin, GPIO_PIN_RESET);
 8002464:	4632      	mov	r2, r6
 8002466:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800246a:	48ba      	ldr	r0, [pc, #744]	; (8002754 <main+0x36c>)
 800246c:	f7fe fc12 	bl	8000c94 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(SS_GPIO_Port, &GPIO_InitStruct);
 8002470:	a90a      	add	r1, sp, #40	; 0x28
 8002472:	48b7      	ldr	r0, [pc, #732]	; (8002750 <main+0x368>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002474:	e9cd 870a 	strd	r8, r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  HAL_GPIO_Init(SS_GPIO_Port, &GPIO_InitStruct);
 800247e:	f7fe fb19 	bl	8000ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin idleLed_Pin sendLed_Pin */
  GPIO_InitStruct.Pin = CE_Pin|idleLed_Pin|sendLed_Pin;
 8002482:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002486:	a90a      	add	r1, sp, #40	; 0x28
 8002488:	48b2      	ldr	r0, [pc, #712]	; (8002754 <main+0x36c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	e9cd 760b 	strd	r7, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = CE_Pin|idleLed_Pin|sendLed_Pin;
 800248e:	920a      	str	r2, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002490:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002494:	f7fe fb0e 	bl	8000ab4 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002498:	6961      	ldr	r1, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800249a:	4632      	mov	r2, r6
  __HAL_RCC_DMA1_CLK_ENABLE();
 800249c:	4339      	orrs	r1, r7
 800249e:	6161      	str	r1, [r4, #20]
 80024a0:	6960      	ldr	r0, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80024a2:	4631      	mov	r1, r6
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024a4:	4038      	ands	r0, r7
 80024a6:	9003      	str	r0, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80024a8:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024aa:	9c03      	ldr	r4, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80024ac:	f7fe f99a 	bl	80007e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80024b0:	200b      	movs	r0, #11
 80024b2:	f7fe f9cd 	bl	8000850 <HAL_NVIC_EnableIRQ>
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80024b6:	2110      	movs	r1, #16
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80024b8:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi2.Init.CRCPolynomial = 10;
 80024bc:	220a      	movs	r2, #10
  hspi2.Instance = SPI2;
 80024be:	4ca6      	ldr	r4, [pc, #664]	; (8002758 <main+0x370>)
 80024c0:	f8df e2a8 	ldr.w	lr, [pc, #680]	; 800276c <main+0x384>
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024c4:	f104 0040 	add.w	r0, r4, #64	; 0x40
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80024c8:	e9c4 e310 	strd	lr, r3, [r4, #64]	; 0x40
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80024cc:	65e1      	str	r1, [r4, #92]	; 0x5c
  hspi2.Init.CRCPolynomial = 10;
 80024ce:	66e2      	str	r2, [r4, #108]	; 0x6c
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80024d0:	e9c4 6612 	strd	r6, r6, [r4, #72]	; 0x48
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024d4:	e9c4 6614 	strd	r6, r6, [r4, #80]	; 0x50
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024d8:	e9c4 6618 	strd	r6, r6, [r4, #96]	; 0x60
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024dc:	66a6      	str	r6, [r4, #104]	; 0x68
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80024de:	65a5      	str	r5, [r4, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024e0:	f7ff f888 	bl	80015f4 <HAL_SPI_Init>
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024e4:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Instance = ADC1;
 80024e8:	4a9c      	ldr	r2, [pc, #624]	; (800275c <main+0x374>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024ea:	f104 0098 	add.w	r0, r4, #152	; 0x98
  hadc1.Instance = ADC1;
 80024ee:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
  hadc1.Init.ContinuousConvMode = ENABLE;
 80024f2:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024f6:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
  ADC_ChannelConfTypeDef sConfig = {0};
 80024fa:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
 80024fe:	960c      	str	r6, [sp, #48]	; 0x30
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002500:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002504:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
  hadc1.Init.NbrOfConversion = 2;
 8002508:	f8c4 a0a8 	str.w	sl, [r4, #168]	; 0xa8
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800250c:	f8c4 90a0 	str.w	r9, [r4, #160]	; 0xa0
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002510:	f7fe f8ae 	bl	8000670 <HAL_ADC_Init>
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8002514:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002516:	a90a      	add	r1, sp, #40	; 0x28
 8002518:	f104 0098 	add.w	r0, r4, #152	; 0x98
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800251c:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800251e:	e9cd a70a 	strd	sl, r7, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002522:	f7fd ff29 	bl	8000378 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002526:	a90a      	add	r1, sp, #40	; 0x28
 8002528:	f104 0098 	add.w	r0, r4, #152	; 0x98
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800252c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002530:	f7fd ff22 	bl	8000378 <HAL_ADC_ConfigChannel>
  htim1.Init.Period = 650;
 8002534:	f240 228a 	movw	r2, #650	; 0x28a
  htim1.Init.Prescaler = 11000;
 8002538:	f642 21f8 	movw	r1, #11000	; 0x2af8
  htim1.Instance = TIM1;
 800253c:	4b88      	ldr	r3, [pc, #544]	; (8002760 <main+0x378>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800253e:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
  htim1.Init.Prescaler = 11000;
 8002542:	e9c4 3132 	strd	r3, r1, [r4, #200]	; 0xc8
  htim1.Init.Period = 650;
 8002546:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800254a:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
 800254e:	e9cd 660c 	strd	r6, r6, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002552:	9607      	str	r6, [sp, #28]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002554:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
  htim1.Init.RepetitionCounter = 0;
 8002558:	e9c4 6636 	strd	r6, r6, [r4, #216]	; 0xd8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800255c:	9608      	str	r6, [sp, #32]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800255e:	f8c4 b0e0 	str.w	fp, [r4, #224]	; 0xe0
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002562:	f7ff fa5f 	bl	8001a24 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002566:	a90a      	add	r1, sp, #40	; 0x28
 8002568:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800256c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002570:	f7ff f8a6 	bl	80016c0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002574:	a907      	add	r1, sp, #28
 8002576:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800257a:	e9cd 6607 	strd	r6, r6, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800257e:	f7ff fa6d 	bl	8001a5c <HAL_TIMEx_MasterConfigSynchronization>
  htim2.Instance = TIM2;
 8002582:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Period = 719;
 8002586:	f240 22cf 	movw	r2, #719	; 0x2cf
  htim2.Init.Prescaler = 9;
 800258a:	2109      	movs	r1, #9
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800258c:	f504 7084 	add.w	r0, r4, #264	; 0x108
  htim2.Instance = TIM2;
 8002590:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
  htim2.Init.Period = 719;
 8002594:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
  htim2.Init.Prescaler = 9;
 8002598:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800259c:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
 80025a0:	e9cd 660c 	strd	r6, r6, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a4:	e9cd 6607 	strd	r6, r6, [sp, #28]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a8:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ac:	f8c4 6118 	str.w	r6, [r4, #280]	; 0x118
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025b0:	f8c4 b120 	str.w	fp, [r4, #288]	; 0x120
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025b4:	f7ff fa36 	bl	8001a24 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025b8:	a90a      	add	r1, sp, #40	; 0x28
 80025ba:	f504 7084 	add.w	r0, r4, #264	; 0x108
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025be:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025c2:	f7ff f87d 	bl	80016c0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025c6:	a907      	add	r1, sp, #28
 80025c8:	f504 7084 	add.w	r0, r4, #264	; 0x108
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025cc:	e9cd 6607 	strd	r6, r6, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025d0:	f7ff fa44 	bl	8001a5c <HAL_TIMEx_MasterConfigSynchronization>
  htim3.Instance = TIM3;
 80025d4:	4a63      	ldr	r2, [pc, #396]	; (8002764 <main+0x37c>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025d6:	4620      	mov	r0, r4
  htim3.Instance = TIM3;
 80025d8:	6022      	str	r2, [r4, #0]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025da:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
 80025de:	e9cd 660c 	strd	r6, r6, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e2:	e9cd 6607 	strd	r6, r6, [sp, #28]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e6:	e9c4 6601 	strd	r6, r6, [r4, #4]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ea:	e9c4 6603 	strd	r6, r6, [r4, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ee:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025f0:	f7ff fa18 	bl	8001a24 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025f4:	a90a      	add	r1, sp, #40	; 0x28
 80025f6:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025f8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025fc:	f7ff f860 	bl	80016c0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002600:	a907      	add	r1, sp, #28
 8002602:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002604:	e9cd 6607 	strd	r6, r6, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002608:	f7ff fa28 	bl	8001a5c <HAL_TIMEx_MasterConfigSynchronization>
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800260c:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc2.Instance = ADC2;
 8002610:	4a55      	ldr	r2, [pc, #340]	; (8002768 <main+0x380>)
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002612:	f504 70a4 	add.w	r0, r4, #328	; 0x148
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002616:	f8c4 7154 	str.w	r7, [r4, #340]	; 0x154
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800261a:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
  hadc2.Instance = ADC2;
 800261e:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
  ADC_ChannelConfTypeDef sConfig = {0};
 8002622:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
 8002626:	960c      	str	r6, [sp, #48]	; 0x30
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002628:	f8c4 9150 	str.w	r9, [r4, #336]	; 0x150
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800262c:	f8c4 615c 	str.w	r6, [r4, #348]	; 0x15c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002630:	f8c4 614c 	str.w	r6, [r4, #332]	; 0x14c
  hadc2.Init.NbrOfConversion = 2;
 8002634:	f8c4 a158 	str.w	sl, [r4, #344]	; 0x158
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002638:	f7fe f81a 	bl	8000670 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_3;
 800263c:	2203      	movs	r2, #3
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800263e:	2306      	movs	r3, #6
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002640:	970b      	str	r7, [sp, #44]	; 0x2c
  nRF24 radio = nRF24(&hspi2, CE_Pin, SS_Pin, 21);
 8002642:	2715      	movs	r7, #21
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002644:	a90a      	add	r1, sp, #40	; 0x28
 8002646:	f504 70a4 	add.w	r0, r4, #328	; 0x148
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800264a:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.Channel = ADC_CHANNEL_3;
 800264c:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800264e:	f7fd fe93 	bl	8000378 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002652:	a90a      	add	r1, sp, #40	; 0x28
 8002654:	f504 70a4 	add.w	r0, r4, #328	; 0x148
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002658:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800265c:	f7fd fe8c 	bl	8000378 <HAL_ADC_ConfigChannel>
  HAL_Delay(1000);
 8002660:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002664:	f7fd fdb8 	bl	80001d8 <HAL_Delay>
  nRF24 radio = nRF24(&hspi2, CE_Pin, SS_Pin, 21);
 8002668:	4643      	mov	r3, r8
 800266a:	464a      	mov	r2, r9
 800266c:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8002670:	a80a      	add	r0, sp, #40	; 0x28
 8002672:	9700      	str	r7, [sp, #0]
 8002674:	f7ff fc34 	bl	8001ee0 <_ZN5nRF24C1EP19__SPI_HandleTypeDefiih>
	HAL_GPIO_TogglePin(idleLed_GPIO_Port, idleLed_Pin);
 8002678:	4629      	mov	r1, r5
 800267a:	4836      	ldr	r0, [pc, #216]	; (8002754 <main+0x36c>)
 800267c:	f7fe fb0e 	bl	8000c9c <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 8002680:	20c8      	movs	r0, #200	; 0xc8
 8002682:	f7fd fda9 	bl	80001d8 <HAL_Delay>
	HAL_GPIO_TogglePin(idleLed_GPIO_Port, idleLed_Pin);
 8002686:	4629      	mov	r1, r5
 8002688:	4832      	ldr	r0, [pc, #200]	; (8002754 <main+0x36c>)
 800268a:	f7fe fb07 	bl	8000c9c <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 800268e:	20c8      	movs	r0, #200	; 0xc8
 8002690:	f7fd fda2 	bl	80001d8 <HAL_Delay>
	HAL_GPIO_TogglePin(idleLed_GPIO_Port, idleLed_Pin);
 8002694:	4629      	mov	r1, r5
 8002696:	482f      	ldr	r0, [pc, #188]	; (8002754 <main+0x36c>)
 8002698:	f7fe fb00 	bl	8000c9c <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 800269c:	20c8      	movs	r0, #200	; 0xc8
 800269e:	f7fd fd9b 	bl	80001d8 <HAL_Delay>
	HAL_GPIO_TogglePin(idleLed_GPIO_Port, idleLed_Pin);
 80026a2:	4629      	mov	r1, r5
 80026a4:	482b      	ldr	r0, [pc, #172]	; (8002754 <main+0x36c>)
 80026a6:	f7fe faf9 	bl	8000c9c <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 80026aa:	20c8      	movs	r0, #200	; 0xc8
 80026ac:	f7fd fd94 	bl	80001d8 <HAL_Delay>
	HAL_GPIO_TogglePin(idleLed_GPIO_Port, idleLed_Pin);
 80026b0:	4629      	mov	r1, r5
 80026b2:	4828      	ldr	r0, [pc, #160]	; (8002754 <main+0x36c>)
 80026b4:	f7fe faf2 	bl	8000c9c <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 80026b8:	20c8      	movs	r0, #200	; 0xc8
 80026ba:	f7fd fd8d 	bl	80001d8 <HAL_Delay>
	HAL_GPIO_TogglePin(idleLed_GPIO_Port, idleLed_Pin);
 80026be:	4629      	mov	r1, r5
 80026c0:	4824      	ldr	r0, [pc, #144]	; (8002754 <main+0x36c>)
 80026c2:	f7fe faeb 	bl	8000c9c <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 80026c6:	20c8      	movs	r0, #200	; 0xc8
 80026c8:	f7fd fd86 	bl	80001d8 <HAL_Delay>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADCReadings, 4);
 80026cc:	f504 71bc 	add.w	r1, r4, #376	; 0x178
 80026d0:	f104 0098 	add.w	r0, r4, #152	; 0x98
 80026d4:	2204      	movs	r2, #4
      convComplete = 0;   //Clear adc flag
 80026d6:	46b0      	mov	r8, r6
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADCReadings, 4);
 80026d8:	f7fd ff1c 	bl	8000514 <HAL_ADC_Start_DMA>
    if(convComplete){
 80026dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80026e0:	b903      	cbnz	r3, 80026e4 <main+0x2fc>
 80026e2:	e7fe      	b.n	80026e2 <main+0x2fa>
      dataPackage[0] = ADCReadings[0] & 0xff;               //Ch0              
 80026e4:	f8d4 2178 	ldr.w	r2, [r4, #376]	; 0x178
      dataPackage[4] = ADCReadings[1] & 0xff;               //Ch2
 80026e8:	f8d4 517c 	ldr.w	r5, [r4, #380]	; 0x17c
      sampleCounter++;    //Increment sample counter
 80026ec:	3601      	adds	r6, #1
      dataPackage[9] = (sampleCounter & 0xff00)>>8;         //^
 80026ee:	ea4f 2c16 	mov.w	ip, r6, lsr #8
      dataPackage[10] = (sampleCounter & 0xff0000)>>16;     //^
 80026f2:	0c37      	lsrs	r7, r6, #16
      dataPackage[11] = (sampleCounter & 0xff000000)>>24;   //^
 80026f4:	0e33      	lsrs	r3, r6, #24
      dataPackage[1] = (ADCReadings[0] & 0xff00)>>8;        //^
 80026f6:	0a11      	lsrs	r1, r2, #8
      dataPackage[2] = (ADCReadings[0] & 0xff0000)>>16;     //Ch1
 80026f8:	0c10      	lsrs	r0, r2, #16
      dataPackage[3] = (ADCReadings[0] & 0xff000000)>>24;   //^
 80026fa:	ea4f 6912 	mov.w	r9, r2, lsr #24
      dataPackage[5] = (ADCReadings[1] & 0xff00)>>8;        //^
 80026fe:	ea4f 2e15 	mov.w	lr, r5, lsr #8
      dataPackage[9] = (sampleCounter & 0xff00)>>8;         //^
 8002702:	f88d c025 	strb.w	ip, [sp, #37]	; 0x25
      dataPackage[10] = (sampleCounter & 0xff0000)>>16;     //^
 8002706:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
      dataPackage[6] = (ADCReadings[1] & 0xff0000)>>16;     //Ch3
 800270a:	ea4f 4c15 	mov.w	ip, r5, lsr #16
      dataPackage[7] = (ADCReadings[1] & 0xff000000)>>24;   //^
 800270e:	0e2f      	lsrs	r7, r5, #24
      dataPackage[11] = (sampleCounter & 0xff000000)>>24;   //^
 8002710:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      dataPackage[0] = ADCReadings[0] & 0xff;               //Ch0              
 8002714:	f88d 201c 	strb.w	r2, [sp, #28]
      dataPackage[1] = (ADCReadings[0] & 0xff00)>>8;        //^
 8002718:	f88d 101d 	strb.w	r1, [sp, #29]
      dataPackage[2] = (ADCReadings[0] & 0xff0000)>>16;     //Ch1
 800271c:	f88d 001e 	strb.w	r0, [sp, #30]
      radio.send((char *) dataPackage, 12, 0);              //Send data
 8002720:	2300      	movs	r3, #0
 8002722:	220c      	movs	r2, #12
 8002724:	a907      	add	r1, sp, #28
 8002726:	a80a      	add	r0, sp, #40	; 0x28
      dataPackage[8] = sampleCounter & 0xff;                //SampleCounter
 8002728:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
      convComplete = 0;   //Clear adc flag
 800272c:	f8c4 8180 	str.w	r8, [r4, #384]	; 0x180
      dataPackage[3] = (ADCReadings[0] & 0xff000000)>>24;   //^
 8002730:	f88d 901f 	strb.w	r9, [sp, #31]
      dataPackage[4] = ADCReadings[1] & 0xff;               //Ch2
 8002734:	f88d 5020 	strb.w	r5, [sp, #32]
      dataPackage[5] = (ADCReadings[1] & 0xff00)>>8;        //^
 8002738:	f88d e021 	strb.w	lr, [sp, #33]	; 0x21
      dataPackage[6] = (ADCReadings[1] & 0xff0000)>>16;     //Ch3
 800273c:	f88d c022 	strb.w	ip, [sp, #34]	; 0x22
      dataPackage[7] = (ADCReadings[1] & 0xff000000)>>24;   //^
 8002740:	f88d 7023 	strb.w	r7, [sp, #35]	; 0x23
      radio.send((char *) dataPackage, 12, 0);              //Send data
 8002744:	f7ff fdb4 	bl	80022b0 <_ZN5nRF244sendEPKcjj>
 8002748:	e7c8      	b.n	80026dc <main+0x2f4>
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
 8002750:	40010c00 	.word	0x40010c00
 8002754:	40010800 	.word	0x40010800
 8002758:	20000028 	.word	0x20000028
 800275c:	40012400 	.word	0x40012400
 8002760:	40012c00 	.word	0x40012c00
 8002764:	40000400 	.word	0x40000400
 8002768:	40012800 	.word	0x40012800
 800276c:	40003800 	.word	0x40003800

08002770 <HAL_ADC_ConvCpltCallback>:

}

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
	convComplete = 1;
 8002770:	2201      	movs	r2, #1
 8002772:	4b02      	ldr	r3, [pc, #8]	; (800277c <HAL_ADC_ConvCpltCallback+0xc>)
 8002774:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	20000028 	.word	0x20000028

08002780 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop

08002784 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002784:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <HAL_MspInit+0x3c>)
{
 8002786:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002788:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800278a:	490e      	ldr	r1, [pc, #56]	; (80027c4 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 800278c:	f042 0201 	orr.w	r2, r2, #1
 8002790:	619a      	str	r2, [r3, #24]
 8002792:	699a      	ldr	r2, [r3, #24]
 8002794:	f002 0201 	and.w	r2, r2, #1
 8002798:	9200      	str	r2, [sp, #0]
 800279a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800279c:	69da      	ldr	r2, [r3, #28]
 800279e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027a2:	61da      	str	r2, [r3, #28]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027aa:	9301      	str	r3, [sp, #4]
 80027ac:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027ae:	684b      	ldr	r3, [r1, #4]
 80027b0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027b8:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ba:	b002      	add	sp, #8
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40010000 	.word	0x40010000

080027c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ca:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 80027cc:	6803      	ldr	r3, [r0, #0]
 80027ce:	4a38      	ldr	r2, [pc, #224]	; (80028b0 <HAL_ADC_MspInit+0xe8>)
{
 80027d0:	b089      	sub	sp, #36	; 0x24
  if(hadc->Instance==ADC1)
 80027d2:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80027d8:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hadc->Instance==ADC1)
 80027dc:	d004      	beq.n	80027e8 <HAL_ADC_MspInit+0x20>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80027de:	4a35      	ldr	r2, [pc, #212]	; (80028b4 <HAL_ADC_MspInit+0xec>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d03f      	beq.n	8002864 <HAL_ADC_MspInit+0x9c>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80027e4:	b009      	add	sp, #36	; 0x24
 80027e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027e8:	4605      	mov	r5, r0
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 80027ea:	2014      	movs	r0, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027ec:	2603      	movs	r6, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027ee:	4b32      	ldr	r3, [pc, #200]	; (80028b8 <HAL_ADC_MspInit+0xf0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f0:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027f2:	699a      	ldr	r2, [r3, #24]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027f4:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027fa:	619a      	str	r2, [r3, #24]
 80027fc:	699a      	ldr	r2, [r3, #24]
 80027fe:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002802:	9200      	str	r2, [sp, #0]
 8002804:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002806:	699a      	ldr	r2, [r3, #24]
 8002808:	f042 0204 	orr.w	r2, r2, #4
 800280c:	619a      	str	r2, [r3, #24]
 800280e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8002810:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002818:	4828      	ldr	r0, [pc, #160]	; (80028bc <HAL_ADC_MspInit+0xf4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800281c:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281e:	f7fe f949 	bl	8000ab4 <HAL_GPIO_Init>
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002822:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002826:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800282a:	2320      	movs	r3, #32
    hdma_adc1.Instance = DMA1_Channel1;
 800282c:	4e24      	ldr	r6, [pc, #144]	; (80028c0 <HAL_ADC_MspInit+0xf8>)
 800282e:	4825      	ldr	r0, [pc, #148]	; (80028c4 <HAL_ADC_MspInit+0xfc>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002830:	60f7      	str	r7, [r6, #12]
    hdma_adc1.Instance = DMA1_Channel1;
 8002832:	6030      	str	r0, [r6, #0]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002834:	4630      	mov	r0, r6
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002836:	e9c6 4401 	strd	r4, r4, [r6, #4]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800283a:	61f4      	str	r4, [r6, #28]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800283c:	e9c6 1204 	strd	r1, r2, [r6, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002840:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002842:	f7fe f829 	bl	8000898 <HAL_DMA_Init>
 8002846:	b108      	cbz	r0, 800284c <HAL_ADC_MspInit+0x84>
      Error_Handler();
 8002848:	f7ff ff9a 	bl	8002780 <Error_Handler>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800284c:	2200      	movs	r2, #0
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800284e:	622e      	str	r6, [r5, #32]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002850:	4611      	mov	r1, r2
 8002852:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002854:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002856:	f7fd ffc5 	bl	80007e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800285a:	2012      	movs	r0, #18
 800285c:	f7fd fff8 	bl	8000850 <HAL_NVIC_EnableIRQ>
}
 8002860:	b009      	add	sp, #36	; 0x24
 8002862:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002864:	2028      	movs	r0, #40	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002866:	2503      	movs	r5, #3
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002868:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <HAL_ADC_MspInit+0xf0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286a:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002872:	619a      	str	r2, [r3, #24]
 8002874:	699a      	ldr	r2, [r3, #24]
 8002876:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800287a:	9202      	str	r2, [sp, #8]
 800287c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800287e:	699a      	ldr	r2, [r3, #24]
 8002880:	f042 0204 	orr.w	r2, r2, #4
 8002884:	619a      	str	r2, [r3, #24]
 8002886:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002888:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002890:	480a      	ldr	r0, [pc, #40]	; (80028bc <HAL_ADC_MspInit+0xf4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002892:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002894:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002896:	f7fe f90d 	bl	8000ab4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800289a:	4622      	mov	r2, r4
 800289c:	4621      	mov	r1, r4
 800289e:	2012      	movs	r0, #18
 80028a0:	f7fd ffa0 	bl	80007e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80028a4:	2012      	movs	r0, #18
 80028a6:	f7fd ffd3 	bl	8000850 <HAL_NVIC_EnableIRQ>
}
 80028aa:	b009      	add	sp, #36	; 0x24
 80028ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40012400 	.word	0x40012400
 80028b4:	40012800 	.word	0x40012800
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40010800 	.word	0x40010800
 80028c0:	200001ac 	.word	0x200001ac
 80028c4:	40020008 	.word	0x40020008

080028c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028c8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ca:	2400      	movs	r4, #0
  if(hspi->Instance==SPI2)
 80028cc:	6802      	ldr	r2, [r0, #0]
 80028ce:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <HAL_SPI_MspInit+0x70>)
{
 80028d0:	b086      	sub	sp, #24
  if(hspi->Instance==SPI2)
 80028d2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80028d8:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hspi->Instance==SPI2)
 80028dc:	d001      	beq.n	80028e2 <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80028de:	b006      	add	sp, #24
 80028e0:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80028e2:	f44f 4120 	mov.w	r1, #40960	; 0xa000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e6:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028e8:	2503      	movs	r5, #3
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028ea:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 80028ee:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f0:	4812      	ldr	r0, [pc, #72]	; (800293c <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028f6:	61da      	str	r2, [r3, #28]
 80028f8:	69da      	ldr	r2, [r3, #28]
 80028fa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80028fe:	9200      	str	r2, [sp, #0]
 8002900:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002902:	699a      	ldr	r2, [r3, #24]
 8002904:	f042 0208 	orr.w	r2, r2, #8
 8002908:	619a      	str	r2, [r3, #24]
 800290a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800290c:	9102      	str	r1, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002914:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002916:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002918:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800291a:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291c:	f7fe f8ca 	bl	8000ab4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002920:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002924:	a902      	add	r1, sp, #8
 8002926:	4805      	ldr	r0, [pc, #20]	; (800293c <HAL_SPI_MspInit+0x74>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	e9cd 4403 	strd	r4, r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800292c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292e:	f7fe f8c1 	bl	8000ab4 <HAL_GPIO_Init>
}
 8002932:	b006      	add	sp, #24
 8002934:	bd70      	pop	{r4, r5, r6, pc}
 8002936:	bf00      	nop
 8002938:	40003800 	.word	0x40003800
 800293c:	40010c00 	.word	0x40010c00

08002940 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002940:	b510      	push	{r4, lr}
  if(htim_base->Instance==TIM1)
 8002942:	6803      	ldr	r3, [r0, #0]
 8002944:	4a21      	ldr	r2, [pc, #132]	; (80029cc <HAL_TIM_Base_MspInit+0x8c>)
{
 8002946:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM1)
 8002948:	4293      	cmp	r3, r2
 800294a:	d013      	beq.n	8002974 <HAL_TIM_Base_MspInit+0x34>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 800294c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002950:	d025      	beq.n	800299e <HAL_TIM_Base_MspInit+0x5e>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8002952:	4a1f      	ldr	r2, [pc, #124]	; (80029d0 <HAL_TIM_Base_MspInit+0x90>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d001      	beq.n	800295c <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002958:	b004      	add	sp, #16
 800295a:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 800295c:	4b1d      	ldr	r3, [pc, #116]	; (80029d4 <HAL_TIM_Base_MspInit+0x94>)
 800295e:	69da      	ldr	r2, [r3, #28]
 8002960:	f042 0202 	orr.w	r2, r2, #2
 8002964:	61da      	str	r2, [r3, #28]
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	9303      	str	r3, [sp, #12]
 800296e:	9b03      	ldr	r3, [sp, #12]
}
 8002970:	b004      	add	sp, #16
 8002972:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002974:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002976:	4b17      	ldr	r3, [pc, #92]	; (80029d4 <HAL_TIM_Base_MspInit+0x94>)
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002978:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 800297a:	699c      	ldr	r4, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800297c:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 800297e:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8002982:	619c      	str	r4, [r3, #24]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800298a:	9301      	str	r3, [sp, #4]
 800298c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800298e:	f7fd ff29 	bl	80007e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002992:	2019      	movs	r0, #25
}
 8002994:	b004      	add	sp, #16
 8002996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800299a:	f7fd bf59 	b.w	8000850 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800299e:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029a0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80029a4:	69dc      	ldr	r4, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029a6:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029a8:	f044 0401 	orr.w	r4, r4, #1
 80029ac:	61dc      	str	r4, [r3, #28]
 80029ae:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029b0:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	9302      	str	r3, [sp, #8]
 80029b8:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029ba:	f7fd ff13 	bl	80007e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029be:	201c      	movs	r0, #28
}
 80029c0:	b004      	add	sp, #16
 80029c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029c6:	f7fd bf43 	b.w	8000850 <HAL_NVIC_EnableIRQ>
 80029ca:	bf00      	nop
 80029cc:	40012c00 	.word	0x40012c00
 80029d0:	40000400 	.word	0x40000400
 80029d4:	40021000 	.word	0x40021000

080029d8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop

080029dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029dc:	e7fe      	b.n	80029dc <HardFault_Handler>
 80029de:	bf00      	nop

080029e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029e0:	e7fe      	b.n	80029e0 <MemManage_Handler>
 80029e2:	bf00      	nop

080029e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029e4:	e7fe      	b.n	80029e4 <BusFault_Handler>
 80029e6:	bf00      	nop

080029e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029e8:	e7fe      	b.n	80029e8 <UsageFault_Handler>
 80029ea:	bf00      	nop

080029ec <SVC_Handler>:
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop

080029f0 <DebugMon_Handler>:
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop

080029f4 <PendSV_Handler>:
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop

080029f8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029f8:	f7fd bbdc 	b.w	80001b4 <HAL_IncTick>

080029fc <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029fc:	4801      	ldr	r0, [pc, #4]	; (8002a04 <DMA1_Channel1_IRQHandler+0x8>)
 80029fe:	f7fd bfc3 	b.w	8000988 <HAL_DMA_IRQHandler>
 8002a02:	bf00      	nop
 8002a04:	200001ac 	.word	0x200001ac

08002a08 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002a08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002a0a:	4804      	ldr	r0, [pc, #16]	; (8002a1c <ADC1_2_IRQHandler+0x14>)
 8002a0c:	f7fd fc28 	bl	8000260 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002a10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 8002a14:	4802      	ldr	r0, [pc, #8]	; (8002a20 <ADC1_2_IRQHandler+0x18>)
 8002a16:	f7fd bc23 	b.w	8000260 <HAL_ADC_IRQHandler>
 8002a1a:	bf00      	nop
 8002a1c:	200000c0 	.word	0x200000c0
 8002a20:	20000170 	.word	0x20000170

08002a24 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a24:	4801      	ldr	r0, [pc, #4]	; (8002a2c <TIM1_UP_IRQHandler+0x8>)
 8002a26:	f7fe bf17 	b.w	8001858 <HAL_TIM_IRQHandler>
 8002a2a:	bf00      	nop
 8002a2c:	200000f0 	.word	0x200000f0

08002a30 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a30:	4801      	ldr	r0, [pc, #4]	; (8002a38 <TIM2_IRQHandler+0x8>)
 8002a32:	f7fe bf11 	b.w	8001858 <HAL_TIM_IRQHandler>
 8002a36:	bf00      	nop
 8002a38:	20000130 	.word	0x20000130

08002a3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a3c:	b430      	push	{r4, r5}

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002a3e:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002a42:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR |= 0x00000001U;
 8002a46:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <SystemInit+0x44>)
  RCC->CFGR &= 0xF8FF0000U;
 8002a48:	4a0e      	ldr	r2, [pc, #56]	; (8002a84 <SystemInit+0x48>)
  RCC->CR |= 0x00000001U;
 8002a4a:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002a4c:	480e      	ldr	r0, [pc, #56]	; (8002a88 <SystemInit+0x4c>)
  RCC->CR |= 0x00000001U;
 8002a4e:	f041 0101 	orr.w	r1, r1, #1
 8002a52:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= 0xF8FF0000U;
 8002a54:	6859      	ldr	r1, [r3, #4]
 8002a56:	400a      	ands	r2, r1
 8002a58:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002a60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a64:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a6c:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002a74:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000U;
 8002a76:	609d      	str	r5, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002a78:	6084      	str	r4, [r0, #8]
#endif 
}
 8002a7a:	bc30      	pop	{r4, r5}
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40021000 	.word	0x40021000
 8002a84:	f8ff0000 	.word	0xf8ff0000
 8002a88:	e000ed00 	.word	0xe000ed00

08002a8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002a8c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002a8e:	e003      	b.n	8002a98 <LoopCopyDataInit>

08002a90 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002a92:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002a94:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002a96:	3104      	adds	r1, #4

08002a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002a98:	480a      	ldr	r0, [pc, #40]	; (8002ac4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002a9c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002a9e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002aa0:	d3f6      	bcc.n	8002a90 <CopyDataInit>
  ldr r2, =_sbss
 8002aa2:	4a0a      	ldr	r2, [pc, #40]	; (8002acc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002aa4:	e002      	b.n	8002aac <LoopFillZerobss>

08002aa6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002aa6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002aa8:	f842 3b04 	str.w	r3, [r2], #4

08002aac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002aac:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002aae:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002ab0:	d3f9      	bcc.n	8002aa6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ab2:	f7ff ffc3 	bl	8002a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ab6:	f000 f80f 	bl	8002ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002aba:	f7ff fc95 	bl	80023e8 <main>
  bx lr
 8002abe:	4770      	bx	lr
  ldr r3, =_sidata
 8002ac0:	08002b78 	.word	0x08002b78
  ldr r0, =_sdata
 8002ac4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002ac8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002acc:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002ad0:	200001f8 	.word	0x200001f8

08002ad4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ad4:	e7fe      	b.n	8002ad4 <CAN1_RX1_IRQHandler>
	...

08002ad8 <__libc_init_array>:
 8002ad8:	b570      	push	{r4, r5, r6, lr}
 8002ada:	2500      	movs	r5, #0
 8002adc:	4e0c      	ldr	r6, [pc, #48]	; (8002b10 <__libc_init_array+0x38>)
 8002ade:	4c0d      	ldr	r4, [pc, #52]	; (8002b14 <__libc_init_array+0x3c>)
 8002ae0:	1ba4      	subs	r4, r4, r6
 8002ae2:	10a4      	asrs	r4, r4, #2
 8002ae4:	42a5      	cmp	r5, r4
 8002ae6:	d109      	bne.n	8002afc <__libc_init_array+0x24>
 8002ae8:	f000 f81a 	bl	8002b20 <_init>
 8002aec:	2500      	movs	r5, #0
 8002aee:	4e0a      	ldr	r6, [pc, #40]	; (8002b18 <__libc_init_array+0x40>)
 8002af0:	4c0a      	ldr	r4, [pc, #40]	; (8002b1c <__libc_init_array+0x44>)
 8002af2:	1ba4      	subs	r4, r4, r6
 8002af4:	10a4      	asrs	r4, r4, #2
 8002af6:	42a5      	cmp	r5, r4
 8002af8:	d105      	bne.n	8002b06 <__libc_init_array+0x2e>
 8002afa:	bd70      	pop	{r4, r5, r6, pc}
 8002afc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b00:	4798      	blx	r3
 8002b02:	3501      	adds	r5, #1
 8002b04:	e7ee      	b.n	8002ae4 <__libc_init_array+0xc>
 8002b06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b0a:	4798      	blx	r3
 8002b0c:	3501      	adds	r5, #1
 8002b0e:	e7f2      	b.n	8002af6 <__libc_init_array+0x1e>
 8002b10:	08002b70 	.word	0x08002b70
 8002b14:	08002b70 	.word	0x08002b70
 8002b18:	08002b70 	.word	0x08002b70
 8002b1c:	08002b74 	.word	0x08002b74

08002b20 <_init>:
 8002b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b22:	bf00      	nop
 8002b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b26:	bc08      	pop	{r3}
 8002b28:	469e      	mov	lr, r3
 8002b2a:	4770      	bx	lr

08002b2c <_fini>:
 8002b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2e:	bf00      	nop
 8002b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b32:	bc08      	pop	{r3}
 8002b34:	469e      	mov	lr, r3
 8002b36:	4770      	bx	lr
